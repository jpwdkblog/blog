{"meta":{"title":"Japan WDK Support Blog","subtitle":"","description":"","author":"jpwdkblog","url":"https://jpwdkblog.github.io","root":"/blog/"},"pages":[],"posts":[{"title":"Windows PE でのネットワーク経由カーネル デバッガ接続方法について","slug":"winpe-kernel-debug-via-network","date":"2020-07-29T08:00:00.000Z","updated":"2020-07-29T11:48:47.185Z","comments":true,"path":"2020/07/29/winpe-kernel-debug-via-network/","link":"","permalink":"https://jpwdkblog.github.io/2020/07/29/winpe-kernel-debug-via-network/","excerpt":"Windows PE でのネットワーク経由のカーネルデバッガ接続方法についてご紹介します。","text":"Windows PE でのネットワーク経由のカーネルデバッガ接続方法についてご紹介します。 Windows PE でのシリアルケーブル経由でのカーネルデバッガ接続方法は、以下のドキュメントが公開されております。この方法では、カーネルデバッガを起動する側であるホスト PC を選びません。 WinPE: Debug Apps - Kernel-mode debugging 対しまして、今回ご紹介するネットワーク経由のカーネルデバッガ接続方法では、通常、以下のブログでご紹介したような kdnet.exe は、ターゲット PC の再起動が必要となるため使えず、予めホスト PC の IP アドレスを Windows PE 側の BCD に設定しておく必要があります。 Hyper-V 仮想マシンへのネットワーク経由のカーネルデバッガ接続方法 それでは、具体的な手順を紹介します。 前提今回は、Windows PE のイメージ作成を行う環境と、カーネルデバッガを起動するホスト PC は同じ PC とします。そして、その PC の Hyper-V 仮想マシン (UEFI を使うため第二世代、セキュアブートは OFF) を、ターゲット PC として、Windows PE の ISO を読ませるようにします。 ホスト PC には、以下のリンクから、Windows ADK for Windows 10 バージョン 1903 と、ADK 用の Windows PE アドオンをインストールしています。 Windows ADK のダウンロードとインストール Windows ADK for Windows 10、バージョン 1903 のダウンロード ADK 用の Windows PE アドオンのダウンロード 手順(1) [スタート] -&gt; [Windows Kits] -&gt; [展開およびイメージング ツール環境] を管理者権限で起動します。 (2) copype.exe で、例として D:\\WinPE_amd64 に作業用ディレクトリを作成します。(D ドライブの使用は例であり、任意の場所で問題ありません。また、すでに D:\\WinPE_amd64 が存在する場合は、コマンドがエラーとなるため、事前に削除しておきます。) 1&gt; copype amd64 d:\\WinPE_amd64 (3) 以下のコマンドを実行し、Windows PE 環境側のネットワーク接続でのカーネルデバッグ設定を行います。 (3-A) Windows PE 環境が UEFI の場合 12345&gt; bcdedit &#x2F;store d:\\WinPE_amd64\\media\\EFI\\Microsoft\\Boot\\BCD &#x2F;set &#123;default&#125; debug on&gt; bcdedit &#x2F;store d:\\WinPE_amd64\\media\\EFI\\Microsoft\\Boot\\BCD &#x2F;set &#123;default&#125; bootdebug on&gt; bcdedit &#x2F;store d:\\WinPE_amd64\\media\\EFI\\Microsoft\\Boot\\BCD &#x2F;dbgsettings NET HOSTIP:&lt;カーネルデバッガを起動するホスト PC の IP アドレス、xxx.xxx.xxx.xxx&gt; PORT:50005 key:5.5.5.5 (3-B) Windows PE 環境がレガシー BIOS の場合 12345&gt; bcdedit &#x2F;store d:\\WinPE_amd64\\media\\Boot\\BCD &#x2F;set &#123;default&#125; debug on&gt; bcdedit &#x2F;store d:\\WinPE_amd64\\media\\Boot\\BCD &#x2F;set &#123;default&#125; bootdebug on&gt; bcdedit &#x2F;store d:\\WinPE_amd64\\media\\Boot\\BCD &#x2F;dbgsettings NET HOSTIP:&lt;カーネルデバッガを起動するホスト PC の IP アドレス、xxx.xxx.xxx.xxx&gt; PORT:50005 key:5.5.5.5 PORT の 50005 と key の 5.5.5.5 は例です。 (4) 以下のコマンドを実行し、設定した結果に問題ないか確認します。 123456&gt; bcdedit &#x2F;store d:\\WinPE_amd64\\media\\EFI\\Microsoft\\Boot\\BCD &#x2F;dbgsettings key 5.5.5.5 debugtype NET hostip xxx.xxx.xxx.xxx port 50005 dhcp Yes (5) 上記が完了したら、以下のコマンドで Windows PE の ISO ファイルを作成します。 1&gt; makewinpemedia &#x2F;iso d:\\WinPE_amd64\\winpe_x64_debug.iso (6) 上記の ISO ファイルで Hyper-V 仮想環境 (第二世代、セキュアブートなし) を作成します。 (上記の手順 (3) で、(3-A) で設定を行ったことが前提です。第一世代ですと、UEFI ではないため、(3-B) でないとカーネルデバッグ接続できません。また、セキュアブートは無効にする必要があります。) 使用する仮想スイッチは、上記「Hyper-V 仮想マシンへのネットワーク経由のカーネルデバッガ接続方法」の「1. ホストPC と仮想マシンをネットワーク接続します。」と同じものを使っています。 (7) カーネルデバッガ側は、以下のコマンドを実行することで Windows PE のターゲットにデバッガ接続し、ブレークインできます。 1&gt; windbg.exe -k net:port&#x3D;50005,key&#x3D;5.5.5.5 以上の内容がお役に立てば幸いです。 変更履歴2020/07/29 created by Tsuda","categories":[{"name":"Windows PE","slug":"Windows-PE","permalink":"https://jpwdkblog.github.io/categories/Windows-PE/"}],"tags":[{"name":"カーネル デバッグ","slug":"カーネル-デバッグ","permalink":"https://jpwdkblog.github.io/tags/%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB-%E3%83%87%E3%83%90%E3%83%83%E3%82%B0/"}]},{"title":"過去ブログについて","slug":"past-blog","date":"2020-01-11T15:00:00.000Z","updated":"2020-07-29T11:48:47.180Z","comments":true,"path":"2020/01/12/past-blog/","link":"","permalink":"https://jpwdkblog.github.io/2020/01/12/past-blog/","excerpt":"過去のブログ情報を紹介いたします。","text":"過去のブログ情報を紹介いたします。 WDK投稿数が多いため、全て確認する場合には下記サイトをご参照ください。https://social.msdn.microsoft.com/Forums/ja-JP/home?forum=wdksupportteamja Windows 10 IoT Core 環境の COM ポートの割り当てについて WIA ミニドライバーサンプル wiadriverex をデバッグする Visual Studio 2015 でのテスト署名方法 カーネルモード デバッガで UMDF ドライバをライブデバッグする V4 プリンター ドライバのデバッガアタッチ方法 デバイスマネージャーの [表示] を [デバイス (接続別)] に切り替える ダンプファイルに保存されたイベントログを取り出す ダンプファイルに保存された ETW トレースログを表示する","categories":[{"name":"Windows Driver Kit 全般","slug":"Windows-Driver-Kit-全般","permalink":"https://jpwdkblog.github.io/categories/Windows-Driver-Kit-%E5%85%A8%E8%88%AC/"}],"tags":[{"name":"過去ブログ","slug":"過去ブログ","permalink":"https://jpwdkblog.github.io/tags/%E9%81%8E%E5%8E%BB%E3%83%96%E3%83%AD%E3%82%B0/"}]},{"title":"jpwdkblog について","slug":"aobut-jpwdkblog","date":"2019-12-31T15:00:00.000Z","updated":"2020-07-29T11:48:47.176Z","comments":true,"path":"2020/01/01/aobut-jpwdkblog/","link":"","permalink":"https://jpwdkblog.github.io/2020/01/01/aobut-jpwdkblog/","excerpt":"","text":"日本マイクロソフトの Windows Driver Kit に関するサポート情報のブログです。 公開日2020 年 1 月 1 日より公開いたしました。 活動について製品のサポート メンバーによって運用されております。仕様に関する情報やトラブル シューティングの手順、実装におけるワンポイント アドバイスを公開いたします。 留意事項サイトのコンテンツや情報において、可能な限り正確な情報を掲載し、更新するよう努めております。しかしながら、状況の変化や情報が古くなることにより、必ずしもお客様環境に適用できない情報となる場合がございます。恐れ入りますが、予めご留意くださいますようお願い申し上げます。","categories":[{"name":"Windows Driver Kit 全般","slug":"Windows-Driver-Kit-全般","permalink":"https://jpwdkblog.github.io/categories/Windows-Driver-Kit-%E5%85%A8%E8%88%AC/"}],"tags":[{"name":"はじめに","slug":"はじめに","permalink":"https://jpwdkblog.github.io/tags/%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB/"}]}]}