{"meta":{"title":"Japan WDK Support Blog","subtitle":"","description":"","author":"jpwdkblog","url":"https://jpwdkblog.github.io/blog","root":"/blog/"},"pages":[],"posts":[{"title":"Windows 11 及び Server 2022 用 HLK の Create project のダイアログの \"Is Windows Driver Project?\" にチェックは入れないでください","slug":"HLK-create-project","date":"2021-07-12T15:00:00.000Z","updated":"2021-08-01T02:20:06.008Z","comments":true,"path":"2021/07/13/HLK-create-project/","link":"","permalink":"https://jpwdkblog.github.io/blog/2021/07/13/HLK-create-project/","excerpt":"Windows 11 及び Server 2022 用 HLK の Create project を実行する際の、”Is Windows Driver Project?” チェックボックスについて注意点を紹介いたします。","text":"Windows 11 及び Server 2022 用 HLK の Create project を実行する際の、”Is Windows Driver Project?” チェックボックスについて注意点を紹介いたします。 Windows 11 HLK 及び Windows HLK for Windows Server 2022 では、「手順 4:プロジェクトの作成」の際に、以下のような “Is Windows Driver Project?” というチェックボックスがある “Create project” のダイアログが表示されます。 誠に恐れ入りますが、Windows 11 や Windows Server 2022 用の認定や署名の取得のために、Hardware Dev Center Dashboard に提出される場合には、このチェックボックスに チェックは入れない ようにお願いいたします。 このチェックボックスは、本来 Dashboard へのご提出用を目的としておらず、弊社開発部門等と協業されているお客様が、その担当部門より指示があった場合にご利用されるものとなっており、将来削除予定となっております。 もしこれをチェックしてプロジェクトを作成して提出された場合、Hardware Dev Center Dashboard 側ではそれを処理できず、ご提出は Pass せず止まったまま、もしくは、Dashboard 側の担当部門にて Cancel の取り扱いとなります。この場合、Windows 11 HLK 及び Windows HLK for Windows Server 2022 でのご提出をご要望される場合は、以下のいずれかの対処策があります。 (a) 上記プロジェクトの作成をチェックボックスにチェックを入れずにやり直し、DF - InfVerif INF Verification (bbcc1b46-d0bf-46c8-85b4-2cd62df34a20) のみ実施します。そして、HLK Studio の Package タブの [Add Supplemental Folder] ボタンでSupplemental folder に以下を追加した提出パッケージを作成します。 上記の提出が Pass しなかった HLKX ファイル Waiver ID Number に 84015 (という Manual Errata ID) をご記載いただいた、WHQL Submission Readme フォーム (b) 万が一、何らかの理由で (a) の方法がうまくいかない場合は、上記プロジェクトの作成からチェックを入れずにやり直し、テストを全て再度ご実施いただきます。 上記の問題を弊社は認識しておりますため、改善に向けたアクションを進めております。ただ、誠に恐れ入りますが、現時点では、上記の回避策があるため、Windows 11 HLK 及び Windows HLK for Windows Server 2022 そのものの修正は行われず、次のバージョンのリリースに修正が含まれる予定です。そのため、誠にお手数ではございますが、Windows 11 HLK 及び Windows HLK for Windows Server 2022 につきましては、上記の対処でのご対応をお願い申し上げます。 参考 URLWindows 11 &amp; Server 2022 HLK kit guidance for creating new submission packages for Widows 11, v21H2 変更履歴2021/07/13 created by Tsuda2021/07/20 modified by Tsuda ※ 本記事は 「jpwdkblog について」 の留意事項に準じます。※ 併せて 「ホームページ」 および 「記事一覧」 もご参照いただければ幸いです。","categories":[{"name":"Hardware Lab Kit","slug":"Hardware-Lab-Kit","permalink":"https://jpwdkblog.github.io/blog/categories/Hardware-Lab-Kit/"}],"tags":[{"name":"Windows 11 HLK","slug":"Windows-11-HLK","permalink":"https://jpwdkblog.github.io/blog/tags/Windows-11-HLK/"}]},{"title":"Windows PE 用ドライバの開発において参考になる公開ドキュメントについて","slug":"winpe-reference-websites","date":"2020-08-11T03:00:00.000Z","updated":"2021-08-01T02:20:06.049Z","comments":true,"path":"2020/08/11/winpe-reference-websites/","link":"","permalink":"https://jpwdkblog.github.io/blog/2020/08/11/winpe-reference-websites/","excerpt":"Windows PE で動作するドライバを開発していただくにあたり、ご参照いただける公開ドキュメントをこちらにまとめてご紹介をいたします。","text":"Windows PE で動作するドライバを開発していただくにあたり、ご参照いただける公開ドキュメントをこちらにまとめてご紹介をいたします。 これをご案内する背景として、上記を実現するために必要な公開情報はあるものの、Windows PE で動作するドライバを開発する、という目的で一元化してはおりませんため、それらをおまとめした今回のブログがお役に立てば幸いです。 ドライバの実装そのものに Windows PE のために特別必要な実装はございませんので、インストール方法とデバッグ方法について以下の通りご案内いたします。 ドライバのインストール方法 Add and Remove Drivers to an offline Windows Image Add Device Drivers to Windows During Windows Setup WinPE:マウントとカスタマイズ デバイス ドライバー (.inf ファイル) を追加する WinPE イメージにデバイス ドライバーを追加するには、DISM /add-driver を使用します。 Dism /Add-Driver /Image:”C:\\WinPE_amd64\\mount” /Driver:”C:\\SampleDriver\\driver.inf” 1 つのコマンドを使用してイメージに複数のドライバーを追加できますが、ほとんどの場合、各ドライバー パッケージを個別に追加すると問題のトラブルシューティングが簡単になります。ドライバーの詳細については、デバイス ドライバー (.inf ファイル) の追加 に関するページを参照してください。 使用可能なすべての DISM ドライバー サービス オプションを確認するには、DISM ドライバー サービスのコマンド ライン オプション に関するページを参照してください。 Drvload Command-Line Options The Drvload tool adds out-of-box drivers to a booted Windows Preinstallation Environment (Windows PE) image. It takes one or more driver .inf files as inputs. To add a driver to an offline Windows PE image, use the Deployment Image Servicing and Management (DISM) tool. For more information, see Add and Remove Drivers to an Offline Windows Image. If the driver .inf file requires a reboot, Windows PE will ignore the request. If the driver .sys file requires a reboot, then the driver cannot be added with Drvload. For more information, see Device Drivers and Deployment Overview and DISM Driver Servicing Command-Line Options. Drivers added using the Drvload tool are marked as the preferred driver for that device. If you add an updated driver during Windows Setup, the driver that you added with Drvload takes precedence. ドライバのデバッグ方法 WinPE: Debug Apps - Kernel-mode debugging 上記に関連して、以下のブログも作成しておりますので、ご参考になりましたら幸いです。 Windows PE でのネットワーク経由カーネル デバッガ接続方法について Windows PE で IOCTL サンプルを動作させる方法について 以上の内容がお役に立てば幸いです。 変更履歴2020/08/11 created by Tsuda ※ 本記事は 「jpwdkblog について」 の留意事項に準じます。※ 併せて 「ホームページ」 および 「記事一覧」 もご参照いただければ幸いです。","categories":[{"name":"Windows PE","slug":"Windows-PE","permalink":"https://jpwdkblog.github.io/blog/categories/Windows-PE/"}],"tags":[{"name":"参考情報","slug":"参考情報","permalink":"https://jpwdkblog.github.io/blog/tags/%E5%8F%82%E8%80%83%E6%83%85%E5%A0%B1/"}]},{"title":"Windows PE で IOCTL サンプルを動作させる方法について","slug":"IOCTL-sample","date":"2020-07-29T08:30:00.000Z","updated":"2021-08-01T02:20:06.025Z","comments":true,"path":"2020/07/29/IOCTL-sample/","link":"","permalink":"https://jpwdkblog.github.io/blog/2020/07/29/IOCTL-sample/","excerpt":"Windows PE で IOCTL サンプルを動作させる方法についてご紹介します。","text":"Windows PE で IOCTL サンプルを動作させる方法についてご紹介します。 今回は、Windows PE で IOCTL サンプルを動作させる方法についてご紹介します。 IOCTL サンプル サイト Windows PE でご自身のドライバがうまく動作しない場合の、比較の一助になれば幸いです。 前提今回は、以前ご案内した以下のブログと同じ環境がすでにあることを前提とします。 Windows PE でのネットワーク経由のカーネルデバッガ接続方法 上記で使用している ISO を上書きすることになるため、仮想マシンはシャットダウン (電源 OFF でもよいです) し、カーネルデバッガも終了しておきます。また、今回はあくまでもテスト目的のため、通常必要となる以下の方法での INF ファイルのドライバインストール方法を使っていない点にご留意ください。 WinPE:マウントとカスタマイズ - デバイス ドライバー (.inf ファイル) を追加する 今回使用する IOCTL のサンプルにも、運用環境で使用してはいけない旨記載されております。 IOCTL サンプル サイト 抜粋: [!CAUTION] This sample driver is not a Plug and Play driver. This is a minimal driver meant to demonstrate a feature of the operating system. Neither this driver nor its sample programs are intended for use in a production environment. Instead, they are intended for educational purposes and as a skeleton driver. 手順(1) IOCTL サンプルを Visual Studio 2019 で x64 / Debug でビルドします。 1-1. サンプルの入手 IOCTL サンプルは、以下のサイトの右側の緑色の [Code] ボタンを押すと表示される [Download ZIP] ボタンで Windows-driver-samples-master.zipをダウンロードすると、Windows-driver-samples-master\\general\\ioctl\\wdm のフォルダにあります。 https://github.com/Microsoft/Windows-driver-samples 1-2. サンプルのビルド このフォルダの ioctl.sln を、Visual Studio 2019 で開きます。Exe フォルダの下にはユーザーモードアプリケーションである ioctlapp のプロジェクト、Sys フォルダの下にはカーネルモードドライバである sioctl のプロジェクトがあることを確認できます。 [ソリューション ‘ioctl’] を右クリックして [構成マネージャー] をクリックします。 今回は、[アクティブソリューション構成] を **[Debug]**、[アクティブ ソリューション プラットフォーム] を [x64] とします。 また、ioctlapp のプロパティを開き、[構成プロパティ]-[C/C++]-[コード生成] の [ランタイム ライブラリ] は [マルチスレッド デバッグ (/MTd)] にしておきます。 [ソリューション ‘ioctl’] を右クリックして [ソリューションのリビルド] をクリックします。 これで、ioctlapp.exe, sioctl.sys ができます。 次のステップに必要なファイルと場所は以下です。 ファイル 場所 ioctlapp.exe&nbsp;&nbsp;&nbsp; ioctl\\wdm\\exe\\x64\\Debug sioctl.sys&nbsp;&nbsp;&nbsp; ioctl\\wdm\\sys\\x64\\Debug (2) 管理者権限で起動された [展開およびイメージング ツール環境] で、以下のコマンドを実行します。(作業用ディレクトリは、前回の記事の前提のまま D:\\WinPE_amd64 とします。) 2-1. テスト署名が利用可能になるようにします。 1&gt; bcdedit /store d:\\WinPE_amd64\\media\\EFI\\Microsoft\\Boot\\BCD /set &#123;default&#125; testsigning on 2-2. 上述のアプリケーションとドライバのファイルを WinPE のイメージにコピーするために、WinPE のイメージをマウントします。 1&gt; Dism /Mount-Image /ImageFile:&quot;D:\\WinPE_amd64\\media\\sources\\boot.wim&quot; /index:1 /MountDir:&quot;D:\\WinPE_amd64\\mount&quot; 参考: Windows PE ブート イメージをマウントする 2-3. マウントした WinPE のイメージに、上述のアプリケーションとドライバのファイルをコピーします。ここでは例として \\Windows\\Ioctl というフォルダにコピーするとします。 123&gt; xcopy D:\\develop\\blog\\ioctl\\wdm\\sys\\x64\\Debug\\sioctl.sys &quot;D:\\WinPE_amd64\\mount\\Windows\\Ioctl&quot;&gt; xcopy D:\\develop\\blog\\ioctl\\wdm\\exe\\x64\\Debug\\ioctlapp.exe &quot;D:\\WinPE_amd64\\mount\\Windows\\Ioctl&quot; 2-4. WinPE イメージのマウントを解除し、変更をコミットします。 1&gt; Dism /Unmount-Image /MountDir:&quot;D:\\WinPE_amd64\\mount&quot; /commit 参考: Windows PE イメージのマウントを解除し、メディアを作成する 2-5. 上記が完了したら、以下のコマンドで Windows PE の ISO ファイルを作成します。 1&gt; makewinpemedia /iso d:\\WinPE_amd64\\winpe_x64_debug.iso (3) 「Windows PE でのネットワーク経由のカーネルデバッガ接続方法」の記事で作成した仮想マシンを起動すると、上記の ISO ファイルで起動します。 (4) カーネルデバッガ側は、以下のコマンドを実行することで Windows PE のターゲットにデバッガ接続し、ブレークインできます。 1&gt; windbg.exe -k net:port=50005,key=5.5.5.5 (5) カーネルデバッガ側では、Symbol Search Path に上記 1-2. の sioctl.sys と ioctlapp.exe のシンボルファイル (sioctl.pdb と ioctlapp.pdb) の存在するフォルダへのフルパスを追記しておきます。 (6) カーネルデバッガの Commands ウィンドウで以下のコマンドを実行して、sioctl.sys の DriverEntry にブレークポイントを貼ってから g を実行します。 1&gt; bp sioctl!DriverEntry (7) 仮想マシン上で開いているコマンドプロンプト上で、以下を実行します。 7-1. ioctlapp.exe のある \\Windows\\Ioctl フォルダに移動します。 1&gt; cd \\Windows\\Ioctl 7-2. ioctlapp.exe をオプションなしで実行します。 1&gt; ioctlapp.exe (8) カーネルデバッガ側で sioctl!DriverEntry にブレークインします。自動的に ioctl\\wdm\\sys\\sioctl.c が開かない場合には開きます。 (9) Commands ウィンドウで p などを入力して、161 行目の「return status;」までステップ実行します。ここで、!drvobj sioctl 2 と実行すれば、132 行目で「DriverObject-&gt;MajorFunction[IRP_MJ_CREATE] = SioctlCreateClose;」を実行している通り、以下のように、IOCTL_MJ_CREATE のコールバックに SIoctl!SioctlCreateClose がセットされていることがわかります。 1234567891011121314151617181920212223242526272829303132333435363738kd&gt; !drvobj sioctl 2Driver object (ffffd18d336f0e40) is for:\\Driver\\SIoctlDriverEntry: fffff80822a76150 SIoctl!GsDriverEntryDriverStartIo: 00000000 DriverUnload: fffff80822a759e0 SIoctl!SioctlUnloadDriverAddDevice: 00000000 Dispatch routines:[00] IRP_MJ_CREATE fffff80822a751d0 SIoctl!SioctlCreateClose &lt;&lt;&lt;&lt;&lt; ★[01] IRP_MJ_CREATE_NAMED_PIPE fffff80627dccd40 nt!IopInvalidDeviceRequest[02] IRP_MJ_CLOSE fffff80822a751d0 SIoctl!SioctlCreateClose[03] IRP_MJ_READ fffff80627dccd40 nt!IopInvalidDeviceRequest[04] IRP_MJ_WRITE fffff80627dccd40 nt!IopInvalidDeviceRequest[05] IRP_MJ_QUERY_INFORMATION fffff80627dccd40 nt!IopInvalidDeviceRequest[06] IRP_MJ_SET_INFORMATION fffff80627dccd40 nt!IopInvalidDeviceRequest[07] IRP_MJ_QUERY_EA fffff80627dccd40 nt!IopInvalidDeviceRequest[08] IRP_MJ_SET_EA fffff80627dccd40 nt!IopInvalidDeviceRequest[09] IRP_MJ_FLUSH_BUFFERS fffff80627dccd40 nt!IopInvalidDeviceRequest[0a] IRP_MJ_QUERY_VOLUME_INFORMATION fffff80627dccd40 nt!IopInvalidDeviceRequest[0b] IRP_MJ_SET_VOLUME_INFORMATION fffff80627dccd40 nt!IopInvalidDeviceRequest[0c] IRP_MJ_DIRECTORY_CONTROL fffff80627dccd40 nt!IopInvalidDeviceRequest[0d] IRP_MJ_FILE_SYSTEM_CONTROL fffff80627dccd40 nt!IopInvalidDeviceRequest[0e] IRP_MJ_DEVICE_CONTROL fffff80822a75250 SIoctl!SioctlDeviceControl[0f] IRP_MJ_INTERNAL_DEVICE_CONTROL fffff80627dccd40 nt!IopInvalidDeviceRequest[10] IRP_MJ_SHUTDOWN fffff80627dccd40 nt!IopInvalidDeviceRequest[11] IRP_MJ_LOCK_CONTROL fffff80627dccd40 nt!IopInvalidDeviceRequest[12] IRP_MJ_CLEANUP fffff80627dccd40 nt!IopInvalidDeviceRequest[13] IRP_MJ_CREATE_MAILSLOT fffff80627dccd40 nt!IopInvalidDeviceRequest[14] IRP_MJ_QUERY_SECURITY fffff80627dccd40 nt!IopInvalidDeviceRequest[15] IRP_MJ_SET_SECURITY fffff80627dccd40 nt!IopInvalidDeviceRequest[16] IRP_MJ_POWER fffff80627dccd40 nt!IopInvalidDeviceRequest[17] IRP_MJ_SYSTEM_CONTROL fffff80627dccd40 nt!IopInvalidDeviceRequest[18] IRP_MJ_DEVICE_CHANGE fffff80627dccd40 nt!IopInvalidDeviceRequest[19] IRP_MJ_QUERY_QUOTA fffff80627dccd40 nt!IopInvalidDeviceRequest[1a] IRP_MJ_SET_QUOTA fffff80627dccd40 nt!IopInvalidDeviceRequest[1b] IRP_MJ_PNP fffff80627dccd40 nt!IopInvalidDeviceRequest (10) カーネルデバッガの Commands ウィンドウで以下のコマンドを実行して、sioctl.sys の SioctlCreateClose にブレークポイントを貼ってから g を実行します。 1&gt; bp sioctl!SioctlCreateClose (11) カーネルデバッガ側で SIoctl!SioctlCreateClose にブレークインします。k を実行すると、確かに ioctlapp.exe の main 関数の CreateFile からオープンされたことが確認できます。 1234567891011121314151617kd&gt; k# Child-SP RetAddr Call Site00 ffff9088`d85c73d8 fffff806`27cceda9 SIoctl!SioctlCreateClose [D:\\develop\\blog\\ioctl\\wdm\\sys\\sioctl.c @ 192] 01 (Inline Function) --------`-------- nt!IopfCallDriver+0x4402 ffff9088`d85c73e0 fffff806`27ccde54 nt!IofCallDriver+0x5903 ffff9088`d85c7420 fffff806`282b9b6b nt!IoCallDriverWithTracing+0x3404 ffff9088`d85c7470 fffff806`282c09af nt!IopParseDevice+0x62b05 ffff9088`d85c75e0 fffff806`282bee11 nt!ObpLookupObjectName+0x78f06 ffff9088`d85c77a0 fffff806`282d99aa nt!ObOpenObjectByNameEx+0x20107 ffff9088`d85c78e0 fffff806`282d9599 nt!IopCreateFile+0x3fa08 ffff9088`d85c7980 fffff806`27e74e95 nt!NtCreateFile+0x7909 ffff9088`d85c7a10 00007ffc`ff25cb04 nt!KiSystemServiceCopyEnd+0x250a 000000ae`5e8ff408 00007ffc`fd1c45e4 ntdll!ZwCreateFile+0x140b 000000ae`5e8ff410 00007ffc`fd1c422f KERNELBASE!CreateFileInternal+0x2f40c (Inline Function) --------`-------- KERNELBASE!CreateFileW+0x6a0d 000000ae`5e8ff580 00007ff7`9ec81cd2 KERNELBASE!CreateFileA+0xbf0e 000000ae`5e8ff5f0 00000000`00000000 ioctlapp!main+0x142 [D:\\develop\\blog\\ioctl\\wdm\\exe\\testapp.c @ 106] Testapp.c の 106 行目のコードは、確かに以下の通り CreateFile() を実行しています。 これでオープンできているのは、sioctl.sys で以下のように、IoCreateDevice() の第 3 引数 ntUnicodeString で \\Device\\SIOCTL という NT Device Name をセットしており、かつ、これに対するシンボリックリンクとして、Win32 Name である \\DosDevices\\IoctlTest を IoCreateSymbolicLink() で作成しているためです。 参考:Introduction to MS-DOS Device Names ただ、上記のドキュメントにも以下の抜粋の様にある通り、上記の方法を取るのは、一般には非 WDM ドライバです。WDM ドライバは一般的にはデバイスインターフェースを登録して使用します。 抜粋： A named device object that is created by a non-WDM driver typically has an MS-DOS device name. An MS-DOS device name is a symbolic link in the object manager with a name of the form \\DosDevices\\DosDeviceName. WDM drivers do not usually supply MS-DOS device names for their devices. Instead, WDM drivers use the IoRegisterDeviceInterface routine to register a device interface. The device interface specifies devices by their capabilities, rather than by a particular naming convention. For more information, see Device Interface Classes. KMDF など WDF については、以下のドキュメントもご参考ください。Using Device Interfaces (12) 最終的に仮想マシン上のコマンドプロンプトには、ioctlapp.exe の実行結果として、以下が表示されて、問題なく動作できていることがわかります。(各 IOCTL の動作を確認したい場合は、上記を参考に SIoctl!SioctlDeviceControl にブレークポイントを貼ってみてください。) 以上の内容がお役に立てば幸いです。 変更履歴2020/07/29 created by Tsuda ※ 本記事は 「jpwdkblog について」 の留意事項に準じます。※ 併せて 「ホームページ」 および 「記事一覧」 もご参照いただければ幸いです。","categories":[{"name":"Windows PE","slug":"Windows-PE","permalink":"https://jpwdkblog.github.io/blog/categories/Windows-PE/"}],"tags":[{"name":"IOCTL","slug":"IOCTL","permalink":"https://jpwdkblog.github.io/blog/tags/IOCTL/"}]},{"title":"Windows PE でのネットワーク経由カーネル デバッガ接続方法について","slug":"winpe-kernel-debug-via-network","date":"2020-07-29T08:00:00.000Z","updated":"2021-08-01T02:20:06.044Z","comments":true,"path":"2020/07/29/winpe-kernel-debug-via-network/","link":"","permalink":"https://jpwdkblog.github.io/blog/2020/07/29/winpe-kernel-debug-via-network/","excerpt":"Windows PE でのネットワーク経由のカーネルデバッガ接続方法についてご紹介します。","text":"Windows PE でのネットワーク経由のカーネルデバッガ接続方法についてご紹介します。 Windows PE でのシリアルケーブル経由でのカーネルデバッガ接続方法は、以下のドキュメントが公開されております。この方法では、カーネルデバッガを起動する側であるホスト PC を選びません。 WinPE: Debug Apps - Kernel-mode debugging 対しまして、今回ご紹介するネットワーク経由のカーネルデバッガ接続方法では、通常、以下のブログでご紹介したような kdnet.exe は、ターゲット PC の再起動が必要となるため使えず、予めホスト PC の IP アドレスを Windows PE 側の BCD に設定しておく必要があります。 Hyper-V 仮想マシンへのネットワーク経由のカーネルデバッガ接続方法 それでは、具体的な手順を紹介します。 前提今回は、Windows PE のイメージ作成を行う環境と、カーネルデバッガを起動するホスト PC は同じ PC とします。そして、その PC の Hyper-V 仮想マシン (UEFI を使うため第二世代、セキュアブートは OFF) を、ターゲット PC として、Windows PE の ISO を読ませるようにします。 ホスト PC には、以下のリンクから、Windows ADK for Windows 10 バージョン 1903 と、ADK 用の Windows PE アドオンをインストールしています。 Windows ADK のダウンロードとインストール Windows ADK for Windows 10、バージョン 1903 のダウンロード ADK 用の Windows PE アドオンのダウンロード 手順(1) [スタート] -&gt; [Windows Kits] -&gt; [展開およびイメージング ツール環境] を管理者権限で起動します。 (2) copype.exe で、例として D:\\WinPE_amd64 に作業用ディレクトリを作成します。(D ドライブの使用は例であり、任意の場所で問題ありません。また、すでに D:\\WinPE_amd64 が存在する場合は、コマンドがエラーとなるため、事前に削除しておきます。) 1&gt; copype amd64 d:\\WinPE_amd64 (3) 以下のコマンドを実行し、Windows PE 環境側のネットワーク接続でのカーネルデバッグ設定を行います。 (3-A) Windows PE 環境が UEFI の場合 12345&gt; bcdedit /store d:\\WinPE_amd64\\media\\EFI\\Microsoft\\Boot\\BCD /set &#123;default&#125; debug on&gt; bcdedit /store d:\\WinPE_amd64\\media\\EFI\\Microsoft\\Boot\\BCD /set &#123;default&#125; bootdebug on&gt; bcdedit /store d:\\WinPE_amd64\\media\\EFI\\Microsoft\\Boot\\BCD /dbgsettings NET HOSTIP:&lt;カーネルデバッガを起動するホスト PC の IP アドレス、xxx.xxx.xxx.xxx&gt; PORT:50005 key:5.5.5.5 (3-B) Windows PE 環境がレガシー BIOS の場合 12345&gt; bcdedit /store d:\\WinPE_amd64\\media\\Boot\\BCD /set &#123;default&#125; debug on&gt; bcdedit /store d:\\WinPE_amd64\\media\\Boot\\BCD /set &#123;default&#125; bootdebug on&gt; bcdedit /store d:\\WinPE_amd64\\media\\Boot\\BCD /dbgsettings NET HOSTIP:&lt;カーネルデバッガを起動するホスト PC の IP アドレス、xxx.xxx.xxx.xxx&gt; PORT:50005 key:5.5.5.5 PORT の 50005 と key の 5.5.5.5 は例です。 (4) 以下のコマンドを実行し、設定した結果に問題ないか確認します。 123456&gt; bcdedit /store d:\\WinPE_amd64\\media\\EFI\\Microsoft\\Boot\\BCD /dbgsettings key 5.5.5.5 debugtype NET hostip xxx.xxx.xxx.xxx port 50005 dhcp Yes (5) 上記が完了したら、以下のコマンドで Windows PE の ISO ファイルを作成します。 1&gt; makewinpemedia /iso d:\\WinPE_amd64\\winpe_x64_debug.iso (6) 上記の ISO ファイルで Hyper-V 仮想環境 (第二世代、セキュアブートなし) を作成します。 (上記の手順 (3) で、(3-A) で設定を行ったことが前提です。第一世代ですと、UEFI ではないため、(3-B) でないとカーネルデバッグ接続できません。また、セキュアブートは無効にする必要があります。) 使用する仮想スイッチは、上記「Hyper-V 仮想マシンへのネットワーク経由のカーネルデバッガ接続方法」の「1. ホストPC と仮想マシンをネットワーク接続します。」と同じものを使っています。 (7) カーネルデバッガ側は、以下のコマンドを実行することで Windows PE のターゲットにデバッガ接続し、ブレークインできます。 1&gt; windbg.exe -k net:port=50005,key=5.5.5.5 以上の内容がお役に立てば幸いです。 変更履歴2020/07/29 created by Tsuda ※ 本記事は 「jpwdkblog について」 の留意事項に準じます。※ 併せて 「ホームページ」 および 「記事一覧」 もご参照いただければ幸いです。","categories":[{"name":"Windows PE","slug":"Windows-PE","permalink":"https://jpwdkblog.github.io/blog/categories/Windows-PE/"}],"tags":[{"name":"カーネル デバッグ","slug":"カーネル-デバッグ","permalink":"https://jpwdkblog.github.io/blog/tags/%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB-%E3%83%87%E3%83%90%E3%83%83%E3%82%B0/"}]},{"title":"過去ブログについて","slug":"past-blog","date":"2020-01-11T15:00:00.000Z","updated":"2021-08-01T02:20:06.040Z","comments":true,"path":"2020/01/12/past-blog/","link":"","permalink":"https://jpwdkblog.github.io/blog/2020/01/12/past-blog/","excerpt":"過去のブログ情報を紹介いたします。","text":"過去のブログ情報を紹介いたします。 WDKWindows Driver Kit サポートチーム フォーラム 抜粋: Windows 10 IoT Core 環境の COM ポートの割り当てについて WIA ミニドライバーサンプル wiadriverex をデバッグする Visual Studio 2015 でのテスト署名方法 カーネルモード デバッガで UMDF ドライバをライブデバッグする V4 プリンター ドライバのデバッガアタッチ方法 デバイスマネージャーの [表示] を [デバイス (接続別)] に切り替える ダンプファイルに保存されたイベントログを取り出す ダンプファイルに保存された ETW トレースログを表示するなど 旧: Japan WDK Support Blog 抜粋: Japan WDK Support Blog 終了のお知らせ Authenticode 署名のドライバインストールのトラブルシューティングの一例 プリンタードライバーの GPD ファイル記述に関する注意事項 Time Travel Debugging (Preview) の Lab Hyper-V 仮想マシンへのネットワーク経由のカーネルデバッガ接続方法 WDK for Windows 10, version 1803 Err.exe でエラーコードの定義を探す Minispy File System Minifilter Driver サンプルを動かしてみるなど 変更履歴2020/01/12 created by Mochizuki2021/04/01 created by Mochizuki ※ 本記事は 「jpwdkblog について」 の留意事項に準じます。※ 併せて 「ホームページ」 および 「記事一覧」 もご参照いただければ幸いです。","categories":[{"name":"Windows Driver Kit 全般","slug":"Windows-Driver-Kit-全般","permalink":"https://jpwdkblog.github.io/blog/categories/Windows-Driver-Kit-%E5%85%A8%E8%88%AC/"}],"tags":[{"name":"過去ブログ","slug":"過去ブログ","permalink":"https://jpwdkblog.github.io/blog/tags/%E9%81%8E%E5%8E%BB%E3%83%96%E3%83%AD%E3%82%B0/"}]},{"title":"jpwdkblog について","slug":"aobut-jpwdkblog","date":"2019-12-31T15:00:00.000Z","updated":"2021-08-01T02:20:06.001Z","comments":true,"path":"2020/01/01/aobut-jpwdkblog/","link":"","permalink":"https://jpwdkblog.github.io/blog/2020/01/01/aobut-jpwdkblog/","excerpt":"","text":"日本マイクロソフトの Windows Driver Kit に関するサポート情報のブログです。 公開日2020 年 1 月 1 日より公開いたしました。 活動について製品のサポート メンバーによって運用されております。仕様に関する情報やトラブル シューティングの手順、実装におけるワンポイント アドバイスを公開いたします。 留意事項サイトのコンテンツや情報において、可能な限り正確な情報を掲載し、更新するよう努めております。しかしながら、状況の変化や情報が古くなることにより、必ずしもお客様環境に適用できない情報となる場合がございます。恐れ入りますが、予めご留意くださいますようお願い申し上げます。","categories":[{"name":"Windows Driver Kit 全般","slug":"Windows-Driver-Kit-全般","permalink":"https://jpwdkblog.github.io/blog/categories/Windows-Driver-Kit-%E5%85%A8%E8%88%AC/"}],"tags":[{"name":"はじめに","slug":"はじめに","permalink":"https://jpwdkblog.github.io/blog/tags/%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB/"}]}],"categories":[{"name":"Hardware Lab Kit","slug":"Hardware-Lab-Kit","permalink":"https://jpwdkblog.github.io/blog/categories/Hardware-Lab-Kit/"},{"name":"Windows PE","slug":"Windows-PE","permalink":"https://jpwdkblog.github.io/blog/categories/Windows-PE/"},{"name":"Windows Driver Kit 全般","slug":"Windows-Driver-Kit-全般","permalink":"https://jpwdkblog.github.io/blog/categories/Windows-Driver-Kit-%E5%85%A8%E8%88%AC/"}],"tags":[{"name":"Windows 11 HLK","slug":"Windows-11-HLK","permalink":"https://jpwdkblog.github.io/blog/tags/Windows-11-HLK/"},{"name":"参考情報","slug":"参考情報","permalink":"https://jpwdkblog.github.io/blog/tags/%E5%8F%82%E8%80%83%E6%83%85%E5%A0%B1/"},{"name":"IOCTL","slug":"IOCTL","permalink":"https://jpwdkblog.github.io/blog/tags/IOCTL/"},{"name":"カーネル デバッグ","slug":"カーネル-デバッグ","permalink":"https://jpwdkblog.github.io/blog/tags/%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB-%E3%83%87%E3%83%90%E3%83%83%E3%82%B0/"},{"name":"過去ブログ","slug":"過去ブログ","permalink":"https://jpwdkblog.github.io/blog/tags/%E9%81%8E%E5%8E%BB%E3%83%96%E3%83%AD%E3%82%B0/"},{"name":"はじめに","slug":"はじめに","permalink":"https://jpwdkblog.github.io/blog/tags/%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB/"}]}