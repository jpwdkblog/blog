<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Print Support App (PSA) にて用紙の設定が既定の値にならない</title>
      <link href="/blog/2024/08/07/psa-default-value-issue/"/>
      <url>/blog/2024/08/07/psa-default-value-issue/</url>
      
        <content type="html"><![CDATA[<p>この記事では Print Support App で発生する問題について説明します。</p><span id="more"></span><br><hr><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>PSA の <code>PrintSupportExtensionSession.PrintDeviceCapabilitiesChanged</code> イベント ハンドラーで PrintDeviceCapabilities に追加の PageMediaType オプションを追加すると、既定のオプションが選ばれない現象が発生します。</p><hr><h3 id="現象"><a href="#現象" class="headerlink" title="現象"></a>現象</h3><p>例えば <code>PageMediaType</code> Feature で <code>ContosoMediaType</code> というのを追加し、次のような PrintTicket を構成した場合 <code>default=&quot;true&quot;</code> が指定されている <code>AutoSelect</code> がオプションとして既定の設定となることが期待されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- media-type-supported --&gt;</span><br><span class="line">&lt;psk:PageMediaType psf2:psftype=&quot;Feature&quot;&gt;</span><br><span class="line">    &lt;psk:AutoSelect psf2:psftype=&quot;Option&quot; psf2:default=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;psk:PhotographicGlossy psf2:psftype=&quot;Option&quot; psf2:default=&quot;false&quot;/&gt;</span><br><span class="line">    &lt;psk:Photographic psf2:psftype=&quot;Option&quot; psf2:default=&quot;false&quot;/&gt;</span><br><span class="line">    &lt;contoso:ContosoMediaType psf2:psftype=&quot;Option&quot; psf2:default=&quot;false&quot;/&gt;</span><br><span class="line">&lt;/psk:PageMediaType&gt;</span><br></pre></td></tr></table></figure><p>しかし、実際には次の画像のように別のオプションが PrintTicket の既定で選択される現象が発生します。本現象は PSA の印刷設定画面の最初の表示時に発生します。</p><p><img src="https://jpwdkblog.github.io/images/psa-default-value/print-pref.png" width=600px align="left" border="1"><br clear="left"></p><p><img src="https://jpwdkblog.github.io/images/win11-usbscan-issue/print-pref.png" width=600px align="left" border="1"><br clear="left"></p><p><img src="https://jpwdkblog.github.io/images/psa-default-value/print-pref2.png" width=600px align="left" border="1"><br clear="left"></p><p><img src="https://jpwdkblog.github.io/images/win11-usbscan-issue/print-pref2.png" width=600px align="left" border="1"><br clear="left"></p><hr><h3 id="状況"><a href="#状況" class="headerlink" title="状況"></a>状況</h3><p>この現象については現在調査中であり、アップデートがあり次第、更新いたします。</p><br><hr><h3 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h3><p><a href="https://learn.microsoft.com/ja-jp/uwp/api/windows.graphics.printing.printsupport.printsupportextensionsession.printdevicecapabilitieschanged?view=winrt-26100">PrintSupportExtensionSession.PrintDeviceCapabilitiesChanged イベント</a></p>]]></content>
      
      
      <categories>
          
          <category> printscan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> printer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPrintDialog を利用したアプリケーションから印刷できない</title>
      <link href="/blog/2023/06/05/printer-CPrintDialog-issue/"/>
      <url>/blog/2023/06/05/printer-CPrintDialog-issue/</url>
      
        <content type="html"><![CDATA[<p>この記事は、CPrintDialog を利用したアプリケーションから印刷した際に発生する問題について説明します。</p><span id="more"></span><br><hr><h3 id="現象"><a href="#現象" class="headerlink" title="現象"></a>現象</h3><p>MFC の CPringDialog クラスを利用して [印刷] ダイアログから印刷を行った場合、正常に印刷が行われない場合があります。この現象は CPrintDialog::CPrintDialog() の第一引数 bPrintSetupOnly に TRUE、第二引数 dwFlags に PD_USEDEVMODECOPIES を指定している、または第二引数に何も設定していない場合に発生します。(第二引数 dwFlags に何も設定しない場合は、既定で PD_USEDEVMODECOPIES が設定されます。) </p><p>なお、この現象が発生するとき、プリンター ドライバー側の視点では DrvStartDoc 関数が呼ばれません。</p><hr><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>CPrintDialog::CPrintDialog() の第一引数 bPrintSetupOnly に TRUE、第二引数 dwFlags に PD_USEDEVMODECOPIES が指定された状況では、PrintDialog::m_pd構造体の nCopies メンバーが既定で 0 となります。この値は、印刷する部数を示しており、最終的に DEVMODE 構造体の dmCopies メンバーに設定されて GDI およびプリンタードライバーで利用されます。GDI は DEVMODE.dmCopies が 0 の場合、印刷する部数は無いものと判断して印刷を行いません。その際、GDI はプリンター ドライバーの DrvStartDoc 関数を呼び出しません。</p><hr><h3 id="回避方法"><a href="#回避方法" class="headerlink" title="回避方法"></a>回避方法</h3><p>CPrintDialog::CPrintDialog() の実行後に CPrintDialog::m_pd構造体の nCopies メンバーに 1 を設定します。</p><p>以下は回避方法としてのサンプルコード例となります。 CPrintDialog::CPrintDialog(TRUE) で dlg オブジェクトを構築した後に、m_pd構造体の nCopies に 1 を設定して、StartDoc 関数を実行します。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HDC printHDC;</span><br><span class="line">CString strMsg;</span><br><span class="line"></span><br><span class="line"><span class="function">CPrintDialog <span class="title">dlg</span><span class="params">(TRUE)</span></span>;</span><br><span class="line">dlg.m_pd.nCopies = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span> (dlg.DoModal() == IDOK)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// DEVMODEの取得</span></span><br><span class="line">    DEVMODE* devmode = dlg.GetDevMode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//印刷用HDCの取得</span></span><br><span class="line">    printHDC = CreateDC(<span class="literal">NULL</span>, dlg.GetDeviceName(), <span class="literal">NULL</span>, devmode);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == printHDC)</span><br><span class="line">    &#123;</span><br><span class="line">        strMsg.Format(_T(<span class="string">&quot;CreateDC is NULL&quot;</span>));</span><br><span class="line">        MessageBox(strMsg);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CDC PrinterDC;</span><br><span class="line">    PrinterDC.Attach(printHDC);</span><br><span class="line"></span><br><span class="line">    CString docname;</span><br><span class="line">    docname.Format(_T(<span class="string">&quot;PrintTest&quot;</span>));</span><br><span class="line">    DOCINFO    docinfo = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DOCINFOを用意</span></span><br><span class="line">    docinfo.cbSize = <span class="keyword">sizeof</span>(docinfo);</span><br><span class="line">    docinfo.lpszDocName = docname;</span><br><span class="line"></span><br><span class="line">    PrinterDC.StartDoc(&amp;docinfo);</span><br></pre></td></tr></table></figure><hr><h3 id="参考情報"><a href="#参考情報" class="headerlink" title="参考情報"></a>参考情報</h3><p><a href="https://learn.microsoft.com/ja-jp/cpp/mfc/reference/cprintdialog-class?view=msvc-170">CPrintDialog クラス</a><br><a href="https://learn.microsoft.com/ja-jp/windows/win32/api/wingdi/ns-wingdi-devmodea">DEVMODEA 構造体 (wingdi.h)</a><br><a href="https://learn.microsoft.com/ja-jp/windows/win32/api/commdlg/ns-commdlg-printdlga">PRINTDLGA structure (commdlg.h)</a></p><hr><p><code>変更履歴</code><br>2023&#x2F;06&#x2F;05 created by mitsuchi</p><p>※ 本記事は 「<a href="https://jpwdkblog.github.io/blog/2020/01/01/aobut-jpwdkblog/">jpwdkblog について</a>」 の留意事項に準じます。<br>※ 併せて 「<a href="https://jpwdkblog.github.io/blog/">ホームページ</a>」 および 「<a href="https://jpwdkblog.github.io/blog/archives/">記事一覧</a>」 もご参照いただければ幸いです。  </p>]]></content>
      
      
      <categories>
          
          <category> printscan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPrintDialog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>プリンタ― ドライバ―のアップデートを行った際に DEVMODE 情報が更新されない</title>
      <link href="/blog/2022/09/20/printer-devmode-issue/"/>
      <url>/blog/2022/09/20/printer-devmode-issue/</url>
      
        <content type="html"><![CDATA[<p>この記事は、プリンタードライバーのアップデートを行った際に発生する問題について説明します。</p><span id="more"></span><br><hr><h3 id="前提となるシナリオ"><a href="#前提となるシナリオ" class="headerlink" title="前提となるシナリオ"></a>前提となるシナリオ</h3><p>プリンタードライバーのアップデート時にプライベート部分の DEVMODE サイズや構造体をプリンタードライバーが更新している場合になります。</p><hr><h3 id="発生する問題"><a href="#発生する問題" class="headerlink" title="発生する問題"></a>発生する問題</h3><p>プリンタードライバーのアップデート時、更新されるドライバーでは、プライベート部分の DEVMODE サイズや構造体を更新している場合があります。このようなシナリオでは、プリンタードライバーが依頼した新しいバージョンの DEVMODE の形式に合わせて、各種 DEVMODE の値を OS が レジストリへ保存・更新します。<br>しかし、ドライバーの更新タイミングにおいて、OS がレジストリへの書き込み処理を行わない問題があるため、システムの再起動等を行うと、印刷設定が保存されなかったり、プリンタードライバーが予期せぬ挙動を示したりする場合があります。</p><hr><h3 id="回避方法"><a href="#回避方法" class="headerlink" title="回避方法"></a>回避方法</h3><p>以下の OS のバージョンでは修正されております。</p><p>・Windows 11<br>・Windows 10 21H2 (<a href="https://support.microsoft.com/ja-jp/topic/2022-%E5%B9%B4-6-%E6%9C%88-28-%E6%97%A5-kb5014666-os-%E3%83%93%E3%83%AB%E3%83%89-19042-1806-19043-1806-19044-1806-%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC-4bd911df-f290-4753-bdec-a83bc8709eb6">2022 年 6 月 28 日 — KB5014666 (OS ビルド 19042.1806、19043.1806、19044.1806) プレビュー</a>) 以降の更新プログラムが適用されている環境<br><br><br>それ以外の OS バージョンでは、明示的に SetPrinter を呼び出して DEVMODE が格納されているレジストリの更新を行います。なお、この際、スプーラーサービスが保持している DEVMODEと同じ値で SetPrinter を実行した場合、レジストリの更新が行われないため、次のように確実にてレジストリが更新されるよう、一時的に DEVMODE の値を変更して SetPrinter を 実行します。<br><br><br>回避方法としては、プリンタ―ドライバ―のアップデート後に、GetPrinter を1回、SetPrinter を2回呼び出します。<br>１．まず、GetPrinter を呼び出して、現在の DEVMODE を取得します。<br>２．続いて、1で取得した現在の DEVMODE から、値を変更（例えば、dmOrientation の値など）した DEVMODE を SetPrinter でセットします。この時、レジストリが更新されます。<br>３．最後に 1 で取得した現在の DEVMODE をそのまま、SetPrinter でセットし、値を元に戻し、かつレジストリも再度更新します。<br><br><br><a href="https://learn.microsoft.com/en-us/troubleshoot/windows/win32/modify-printer-settings-setprinter-api">Modify printer settings by using the SetPrinter function</a> のサンプル コードをベースとした回避方法の例となります。<br>上記 「１．まず、GetPrinter を呼び出して、現在の DEVMODE を取得します。」については、dmOrientation の値を変更するための DEVMODE と 「３．最後に 1 で取得した現在の DEVMODE をそのまま、SetPrinter でセットし、値を元に戻し、かつレジストリも再度更新します。」で 元に戻す DEVMODE を取得するために 2 回 GetPrinter を呼び出しています。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MySetPrinter</span></span><br><span class="line"><span class="comment">// Demonstrates how to use the SetPrinter API.  This particular function changes the orientation</span></span><br><span class="line"><span class="comment">// for the printer specified in pPrinterName to the orientation specified in dmOrientation.</span></span><br><span class="line"><span class="comment">// Valid values for dmOrientation are:</span></span><br><span class="line"><span class="comment">// DMORIENT_PORTRAIT (1) or DMORIENT_LANDSCAPE (2)</span></span><br><span class="line"><span class="function">BOOL <span class="title">MySetPrinter</span><span class="params">(LPTSTR pPrinterName, <span class="keyword">short</span> dmOrientation)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hPrinter = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwNeeded = <span class="number">0</span>;</span><br><span class="line">    PRINTER_INFO_2 *pi2 = <span class="literal">NULL</span>;</span><br><span class="line">    PRINTER_INFO_2 *pi2_org = <span class="literal">NULL</span>;</span><br><span class="line">    DEVMODE *pDevMode = <span class="literal">NULL</span>;</span><br><span class="line">    PRINTER_DEFAULTS pd;</span><br><span class="line">    BOOL bFlag;</span><br><span class="line">    LONG lFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open printer handle (on Windows NT, you need full-access because you</span></span><br><span class="line">    <span class="comment">// will eventually use SetPrinter)...</span></span><br><span class="line">    ZeroMemory(&amp;pd, <span class="keyword">sizeof</span>(pd));</span><br><span class="line">    pd.DesiredAccess = PRINTER_ALL_ACCESS;</span><br><span class="line">    bFlag = OpenPrinter(pPrinterName, &amp;hPrinter, &amp;pd);</span><br><span class="line">    <span class="keyword">if</span> (!bFlag || (hPrinter == <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The first GetPrinter tells you how big the buffer should be in</span></span><br><span class="line">    <span class="comment">// order to hold all of PRINTER_INFO_2. Note that this should fail with</span></span><br><span class="line">    <span class="comment">// ERROR_INSUFFICIENT_BUFFER.  If GetPrinter fails for any other reason</span></span><br><span class="line">    <span class="comment">// or dwNeeded isn&#x27;t set for some reason, then there is a problem...</span></span><br><span class="line">    SetLastError(<span class="number">0</span>);</span><br><span class="line">    bFlag = GetPrinter(hPrinter, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;dwNeeded);</span><br><span class="line">    <span class="keyword">if</span> ((!bFlag) &amp;&amp; (GetLastError() != ERROR_INSUFFICIENT_BUFFER) || (dwNeeded == <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        ClosePrinter(hPrinter);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate enough space for PRINTER_INFO_2...</span></span><br><span class="line">    pi2 = (PRINTER_INFO_2 *)GlobalAlloc(GPTR, dwNeeded);</span><br><span class="line">    <span class="keyword">if</span> (pi2 == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ClosePrinter(hPrinter);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//１．まず、GetPrinter を呼び出して、現在の DEVMODE を取得します。</span></span><br><span class="line">    <span class="comment">//３．で DEVMODE の値を戻すために呼び出します。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// The second GetPrinter fills in all the current settings, so all you</span></span><br><span class="line">    <span class="comment">// need to do is modify what you&#x27;re interested in...</span></span><br><span class="line">    bFlag = GetPrinter(hPrinter, <span class="number">2</span>, (LPBYTE)pi2, dwNeeded, &amp;dwNeeded);</span><br><span class="line">    <span class="keyword">if</span> (!bFlag)</span><br><span class="line">    &#123;</span><br><span class="line">        GlobalFree(pi2);</span><br><span class="line">        ClosePrinter(hPrinter);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pi2_org = (PRINTER_INFO_2 *)GlobalAlloc(GPTR, dwNeeded);</span><br><span class="line">    <span class="keyword">if</span> (pi2_org == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        GlobalFree(pi2);</span><br><span class="line">        ClosePrinter(hPrinter);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//１．GetPrinter を呼び出して、現在の DEVMODE を取得します。</span></span><br><span class="line">    <span class="comment">//２．で dmOrientation の値を変更するために呼び出します。</span></span><br><span class="line">    bFlag = GetPrinter(hPrinter, <span class="number">2</span>, (LPBYTE)pi2_org, dwNeeded, &amp;dwNeeded);</span><br><span class="line">    <span class="keyword">if</span> (!bFlag)</span><br><span class="line">    &#123;</span><br><span class="line">        GlobalFree(pi2);</span><br><span class="line">        GlobalFree(pi2_org);</span><br><span class="line">        ClosePrinter(hPrinter);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Driver is reporting that it doesn&#x27;t support this change...</span></span><br><span class="line">    <span class="keyword">if</span> (!(pi2-&gt;pDevMode-&gt;dmFields &amp; DM_ORIENTATION))</span><br><span class="line">    &#123;</span><br><span class="line">        GlobalFree(pi2);</span><br><span class="line">        GlobalFree(pi2_org);</span><br><span class="line">        ClosePrinter(hPrinter);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Specify exactly what we are attempting to change...</span></span><br><span class="line">    pi2-&gt;pDevMode-&gt;dmFields = DM_ORIENTATION;</span><br><span class="line">    pi2-&gt;pDevMode-&gt;dmOrientation = dmOrientation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do not attempt to set security descriptor...</span></span><br><span class="line">    pi2-&gt;pSecurityDescriptor = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//２．続いて、１で取得した現在の DEVMODE から、値を変更（例えば、dmOrientation の値など）した </span></span><br><span class="line">    <span class="comment">//DEVMODE を SetPrinter でセットします。この時、レジストリが更新されます。</span></span><br><span class="line">    <span class="comment">// Update printer information...</span></span><br><span class="line">    bFlag = SetPrinter(hPrinter, <span class="number">2</span>, (LPBYTE)pi2, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (!bFlag)</span><br><span class="line">    <span class="comment">// The driver doesn&#x27;t support, or it is unable to make the change...</span></span><br><span class="line">    &#123;</span><br><span class="line">        GlobalFree(pi2);</span><br><span class="line">        GlobalFree(pi2_org);</span><br><span class="line">        ClosePrinter(hPrinter);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//３．最後に 1 で取得した現在の DEVMODE をそのまま、SetPrinter でセットし、値を元に戻し、かつレジストリも再度更新します。</span></span><br><span class="line">    bFlag = SetPrinter(hPrinter, <span class="number">2</span>, (LPBYTE)pi2_org, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (!bFlag)</span><br><span class="line">    &#123;</span><br><span class="line">        GlobalFree(pi2);</span><br><span class="line">        GlobalFree(pi2_org);</span><br><span class="line">        ClosePrinter(hPrinter);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tell other apps that there was a change...</span></span><br><span class="line">    SendMessageTimeout(HWND_BROADCAST, WM_DEVMODECHANGE, <span class="number">0L</span>,</span><br><span class="line">      (LPARAM)(LPCSTR)pPrinterName,</span><br><span class="line">      SMTO_NORMAL, <span class="number">1000</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clean up...</span></span><br><span class="line">    <span class="keyword">if</span> (pi2_org)</span><br><span class="line">        GlobalFree(pi2_org);</span><br><span class="line">    <span class="keyword">if</span> (pi2)</span><br><span class="line">        GlobalFree(pi2);</span><br><span class="line">    <span class="keyword">if</span> (hPrinter)</span><br><span class="line">        ClosePrinter(hPrinter);</span><br><span class="line">    <span class="keyword">if</span> (pDevMode)</span><br><span class="line">        GlobalFree(pDevMode);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="参考情報"><a href="#参考情報" class="headerlink" title="参考情報"></a>参考情報</h3><p><a href="https://learn.microsoft.com/ja-jp/windows/win32/printdocs/setprinter">SetPrinter 関数</a><br><a href="https://learn.microsoft.com/ja-jp/windows/win32/printdocs/getprinter">GetPrinter 関数</a><br><a href="https://learn.microsoft.com/ja-jp/windows-hardware/drivers/display/the-devmodew-structure">DEVMODEW 構造体</a></p><hr><p><code>変更履歴</code><br>2022&#x2F;09&#x2F;20 created by mitsuchi</p><p>※ 本記事は 「<a href="https://jpwdkblog.github.io/blog/2020/01/01/aobut-jpwdkblog/">jpwdkblog について</a>」 の留意事項に準じます。<br>※ 併せて 「<a href="https://jpwdkblog.github.io/blog/">ホームページ</a>」 および 「<a href="https://jpwdkblog.github.io/blog/archives/">記事一覧</a>」 もご参照いただければ幸いです。  </p>]]></content>
      
      
      <categories>
          
          <category> printscan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> devmode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UWP アプリから nul ポートが指定されているプリンターに印刷できない</title>
      <link href="/blog/2022/03/10/printer-null-port-issue/"/>
      <url>/blog/2022/03/10/printer-null-port-issue/</url>
      
        <content type="html"><![CDATA[<p>この記事では、Windows 10 における印刷における問題について説明します。</p><span id="more"></span><br><hr><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>現在、Windows 10 の <a href="https://support.microsoft.com/ja-jp/topic/2021-%E5%B9%B4-12-%E6%9C%88-14-%E6%97%A5-kb5008212-os-%E3%83%93%E3%83%AB%E3%83%89-19041-1415-19042-1415-19043-1415-%E3%81%8A%E3%82%88%E3%81%B3-19044-1415-b46200db-74c3-450e-b200-51013957312a">2021 年 12 月 14 日— KB5008212 (OS ビルド 19041.1415、19042.1415、19043.1415、および 19044.1415)</a> を適用した環境において、UWP アプリから <code>nul:</code> ポートが指定されているプリンターで印刷が失敗することを確認しています。</p><p>現象<br>次のような条件で問題が発生します。</p><ul><li><p>プリンターのプロパティにて、プリンター ポートとして次のように <code>nul:</code> が指定されています。<br> <img src="https://jpwdkblog.github.io/images/printer-null-port-issue/printerprops.png" align="left" border="1"><br clear="left"></p></li><li><p>[フォト] などの UWP ベースのアプリから印刷します。<br> その結果、次のようなエラーが発生します。<br> <img src="https://jpwdkblog.github.io/images/printer-null-port-issue/print-error.png" align="left" border="1"><br clear="left"></p></li></ul><br><hr><h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p>2022&#x2F;6&#x2F;2 の更新プログラム KB5014023 (OS Builds 19042.1741, 19043.1741, and 19044.1741) にて、この問題について者は修正されました。</p><p>June 2, 2022—KB5014023 (OS Builds 19042.1741, 19043.1741, and 19044.1741) Preview <br><br><a href="https://support.microsoft.com/en-us/topic/june-2-2022-kb5014023-os-builds-19042-1741-19043-1741-and-19044-1741-preview-65ac6a5d-439a-4e88-b431-a5e2d4e2516a">https://support.microsoft.com/en-us/topic/june-2-2022-kb5014023-os-builds-19042-1741-19043-1741-and-19044-1741-preview-65ac6a5d-439a-4e88-b431-a5e2d4e2516a</a></p><br><hr><p><code>変更履歴</code><br><code>2022/03/10 created by riwaida</code><br><code>2022/10/02 modified by riwaida: 更新プログラムの情報追加</code>  </p><p>※ 本記事は 「<a href="https://jpwdkblog.github.io/blog/2020/01/01/aobut-jpwdkblog/">jpwdkblog について</a>」 の留意事項に準じます。<br>※ 併せて 「<a href="https://jpwdkblog.github.io/blog/">ホームページ</a>」 および 「<a href="https://jpwdkblog.github.io/blog/archives/">記事一覧</a>」 もご参照いただければ幸いです。  </p>]]></content>
      
      
      <categories>
          
          <category> printscan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 11 における USB スキャナーで発生する問題について</title>
      <link href="/blog/2021/12/28/win11-usbscan-issue/"/>
      <url>/blog/2021/12/28/win11-usbscan-issue/</url>
      
        <content type="html"><![CDATA[<p>この記事では、Windows 11 に USB スキャナーを接続した問題について説明します。</p><span id="more"></span><br><hr><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>現在、Windows 11 において、次のような操作を行うと USB スキャナーのドライバーのロードに失敗して、スキャナーが正しく動作しない問題があることを確認しています。</p><p>(1) Windows が起動している状態で USB スキャナーを接続します。</p><p>(2) スキャナーと PC が接続されている USB ケーブルを抜く、またはスキャナーの電源をオフにします。</p><p>(3) Windows を再起動します。</p><p>(4) Windows 起動後、再度 USB スキャナーを接続、あるいは電源をオンにします。</p><p>結果：USB スキャナーを使用するアプリケーションを起動し、スキャナーの利用を試みると、スキャナー ドライバーの有無に関わらず [このデバイスを使用するには WIA ドライバーが必要です。] というエラーが表示されます。</p><br><hr><h3 id="状況"><a href="#状況" class="headerlink" title="状況"></a>状況</h3><p>この現象については Windows 11 の不具合であり 2022&#x2F;9&#x2F;20 に公開された更新プログラム KB5017383 (OS Build 22000.1042) 以降で修正されました。  </p><p>September 20, 2022—KB5017383 (OS Build 22000.1042) Preview<br><a href="https://support.microsoft.com/en-us/topic/september-20-2022-kb5017383-os-build-22000-1042-preview-62753265-68e9-45d2-adcb-f996bf3ad393">https://support.microsoft.com/en-us/topic/september-20-2022-kb5017383-os-build-22000-1042-preview-62753265-68e9-45d2-adcb-f996bf3ad393</a></p><br><hr><h3 id="開発者向け詳細情報"><a href="#開発者向け詳細情報" class="headerlink" title="開発者向け詳細情報"></a>開発者向け詳細情報</h3><p>この現象による問題かどうかについては c:\windows\debug\WIA\wiatrace.log を参照することで、判断することができます。<br>Windows 11 において、ドライバーをインストールしているにもかかわらず、概要に記載のようなエラーが表示される場合、WIA Trace Log に次のようなログが出力されていないかご確認ください。USDWrapper::LoadDriver のエラーコードとして <code>hr = 0x80070057</code> が記録されている場合、この現象に該当していると考えられます。   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WIA: xxxx.yyy zzz 0 0 [wiaservc.dll] ERROR: USDWrapper::LoadDriver, We encountered an error attempting to load driver for (YourScannerName), error (0x80070057)</span><br><span class="line">WIA: xxxx.yyy zzz 0 0 [wiaservc.dll] ERROR: DeviceListManager::ProcessDeviceArrival, The driver for device (YourScannerName) failed to load (hr = 0x80070057)</span><br></pre></td></tr></table></figure><hr><p><code>変更履歴</code><br><code>2021/12/31 created by riwaida</code><br><code>2022/10/20 modified by riwaida : 更新プログラムの情報追加</code>  </p><p>※ 本記事は 「<a href="https://jpwdkblog.github.io/blog/2020/01/01/aobut-jpwdkblog/">jpwdkblog について</a>」 の留意事項に準じます。<br>※ 併せて 「<a href="https://jpwdkblog.github.io/blog/">ホームページ</a>」 および 「<a href="https://jpwdkblog.github.io/blog/archives/">記事一覧</a>」 もご参照いただければ幸いです。  </p>]]></content>
      
      
      <categories>
          
          <category> printscan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 11 及び Server 2022 用 HLK の Create project のダイアログの &quot;Is Windows Driver Project?&quot; にチェックは入れないでください</title>
      <link href="/blog/2021/07/13/HLK-create-project/"/>
      <url>/blog/2021/07/13/HLK-create-project/</url>
      
        <content type="html"><![CDATA[<p>Windows 11 及び Server 2022 用 HLK の Create project を実行する際の、”Is Windows Driver Project?” チェックボックスについて注意点を紹介いたします。  </p><span id="more"></span><br><hr><p>Windows 11 HLK 及び Windows HLK for Windows Server 2022 では、「<a href="https://docs.microsoft.com/ja-jp/windows-hardware/test/hlk/getstarted/step-4-create-a-project">手順 4:プロジェクトの作成</a>」の際に、以下のような “Is Windows Driver Project?” というチェックボックスがある “Create project” のダイアログが表示されます。  </p><p> <img src="https://jpwdkblog.github.io/images/HLK-create-project/CreateProject.png" width=400px><br clear="left">  </p><p>誠に恐れ入りますが、Windows 11 や Windows Server 2022 用の認定や署名の取得のために、Hardware Dev Center Dashboard に提出される場合には、このチェックボックスに <u><strong>チェックは入れない</strong></u> ようにお願いいたします。  </p><p>このチェックボックスは、本来 Dashboard へのご提出用を目的としておらず、弊社開発部門等と協業されているお客様が、その担当部門より指示があった場合にご利用されるものとなっており、将来削除予定となっております。  </p><p>もしこれをチェックしてプロジェクトを作成して提出された場合、Hardware Dev Center Dashboard 側ではそれを処理できず、ご提出は Pass せず止まったまま、もしくは、Dashboard 側の担当部門にて Cancel の取り扱いとなります。<br>この場合、Windows 11 HLK 及び Windows HLK for Windows Server 2022 でのご提出をご要望される場合は、以下のいずれかの対処策があります。  </p><p>  (a) 上記プロジェクトの作成をチェックボックスにチェックを入れずにやり直し、<a href="https://docs.microsoft.com/en-us/windows-hardware/test/hlk/testref/bbcc1b46-d0bf-46c8-85b4-2cd62df34a20">DF - InfVerif INF Verification (bbcc1b46-d0bf-46c8-85b4-2cd62df34a20)</a> のみ実施します。そして、HLK Studio の Package タブの [Add Supplemental Folder] ボタンでSupplemental folder に以下を追加した提出パッケージを作成します。  </p><ul><li>上記の提出が Pass しなかった HLKX ファイル</li><li>Waiver ID Number に 84015 (という Manual Errata ID) をご記載いただいた、<a href="http://download.microsoft.com/download/4/C/3/4C34C72F-FD65-41C9-B89A-A0858A2C3562/windows-hardware-dashboard-submission-readme-v2.2.docx">WHQL Submission Readme フォーム</a></li></ul><p>  (b)万が一、何らかの理由で (a) の方法がうまくいかない場合は、上記プロジェクトの作成からチェックを入れずにやり直し、テストを全て再度ご実施いただきます。  </p><p>上記の問題を弊社は認識しておりますため、改善に向けたアクションを進めております。ただ、誠に恐れ入りますが、現時点では、上記の回避策があるため、Windows 11 HLK 及び Windows HLK for Windows Server 2022 そのものの修正は行われず、次のバージョンのリリースに修正が含まれる予定です。そのため、誠にお手数ではございますが、Windows 11 HLK 及び Windows HLK for Windows Server 2022 につきましては、上記の対処でのご対応をお願い申し上げます。  </p><ul><li>参考 URL<br><a href="https://techcommunity.microsoft.com/t5/windows-hardware-certification/windows-11-amp-server-2022-hlk-kit-guidance-for-creating-new/ba-p/2567481">Windows 11 &amp; Server 2022 HLK kit guidance for creating new submission packages for Widows 11, v21H2</a></li></ul><hr><p><code>変更履歴</code><br><code>2021/07/13 created by Tsuda</code><br><code>2021/07/20 modified by Tsuda</code>  </p><p>※ 本記事は 「<a href="https://jpwdkblog.github.io/blog/2020/01/01/aobut-jpwdkblog/">jpwdkblog について</a>」 の留意事項に準じます。<br>※ 併せて 「<a href="https://jpwdkblog.github.io/blog/">ホームページ</a>」 および 「<a href="https://jpwdkblog.github.io/blog/archives/">記事一覧</a>」 もご参照いただければ幸いです。  </p>]]></content>
      
      
      <categories>
          
          <category> Hardware Lab Kit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 11 HLK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows PE 用ドライバの開発において参考になる公開ドキュメントについて</title>
      <link href="/blog/2020/08/11/winpe-reference-websites/"/>
      <url>/blog/2020/08/11/winpe-reference-websites/</url>
      
        <content type="html"><![CDATA[<p>Windows PE で動作するドライバを開発していただくにあたり、ご参照いただける公開ドキュメントをこちらにまとめてご紹介をいたします。</p><span id="more"></span><br><hr><p>これをご案内する背景として、上記を実現するために必要な公開情報はあるものの、Windows PE で動作するドライバを開発する、という目的で一元化してはおりませんため、それらをおまとめした今回のブログがお役に立てば幸いです。  </p><p>ドライバの実装そのものに Windows PE のために特別必要な実装はございませんので、インストール方法とデバッグ方法について以下の通りご案内いたします。  </p><hr><h2 id="ドライバのインストール方法"><a href="#ドライバのインストール方法" class="headerlink" title="ドライバのインストール方法"></a>ドライバのインストール方法</h2><ul><li><p><a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/add-and-remove-drivers-to-an-offline-windows-image">Add and Remove Drivers to an offline Windows Image</a>  </p></li><li><p><a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/add-device-drivers-to-windows-during-windows-setup">Add Device Drivers to Windows During Windows Setup</a>  </p></li><li><p><a href="https://docs.microsoft.com/ja-jp/windows-hardware/manufacture/desktop/winpe-mount-and-customize">WinPE:マウントとカスタマイズ</a>  </p><blockquote><p>デバイス ドライバー (.inf ファイル) を追加する  </p><ul><li><p>WinPE イメージにデバイス ドライバーを追加するには、DISM &#x2F;add-driver を使用します。</p><p>Dism &#x2F;Add-Driver &#x2F;Image:”C:\WinPE_amd64\mount” &#x2F;Driver:”C:\SampleDriver\driver.inf”</p></li></ul><p>1 つのコマンドを使用してイメージに複数のドライバーを追加できますが、ほとんどの場合、各ドライバー パッケージを個別に追加すると問題のトラブルシューティングが簡単になります。<br>ドライバーの詳細については、<a href="https://nam06.safelinks.protection.outlook.com/?url=https://docs.microsoft.com/ja-jp/windows-hardware/manufacture/desktop/winpe-add-drivers&data=02%7C01%7Cdamochiz@microsoft.com%7C37c50955ca634ba702c608d8383be05c%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637321177103220594&sdata=W98NawWBR4H6So2M70XucYl6WDWoZriC+B//AoTvVPE=&reserved=0">デバイス ドライバー (.inf ファイル) の追加</a> に関するページを参照してください。 使用可能なすべての <a href="https://nam06.safelinks.protection.outlook.com/?url=https://docs.microsoft.com/ja-jp/windows-hardware/manufacture/desktop/dism-driver-servicing-command-line-options-s14&data=02%7C01%7Cdamochiz@microsoft.com%7C37c50955ca634ba702c608d8383be05c%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637321177103230589&sdata=IERaF+uCfM9z3twCzIaBnQUlytFRCisIXD3K9JGl0Ks=&reserved=0">DISM ドライバー サービス オプションを確認するには、DISM ドライバー サービスのコマンド ライン オプション</a> に関するページを参照してください。  </p></blockquote></li><li><p><a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/drvload-command-line-options">Drvload Command-Line Options</a></p><blockquote><p>The Drvload tool adds out-of-box drivers to a booted Windows Preinstallation Environment (Windows PE) image. It takes one or more driver .inf files as inputs. To add a driver to an offline Windows PE image, use the Deployment Image Servicing and Management (DISM) tool. For more information, see <a href="https://nam06.safelinks.protection.outlook.com/?url=https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/add-and-remove-drivers-to-an-offline-windows-image&data=02%7C01%7Cdamochiz@microsoft.com%7C37c50955ca634ba702c608d8383be05c%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637321177103240581&sdata=AGaBoJ9k1469JrFJ9wD5EbgFb2kc53HEsArtVbKE33E=&reserved=0">Add and Remove Drivers to an Offline Windows Image</a>.</p><p>If the driver .inf file requires a reboot, Windows PE will ignore the request. If the driver .sys file requires a reboot, then the driver cannot be added with Drvload. For more information, see <a href="https://nam06.safelinks.protection.outlook.com/?url=https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/device-drivers-and-deployment-overview&data=02%7C01%7Cdamochiz@microsoft.com%7C37c50955ca634ba702c608d8383be05c%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637321177103250576&sdata=HE9JMSfjmwXzyS83feNJD46D1drGkQz7xCxIVb3/fD0=&reserved=0">Device Drivers and Deployment Overview</a> and <a href="https://nam06.safelinks.protection.outlook.com/?url=https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/dism-driver-servicing-command-line-options-s14&data=02%7C01%7Cdamochiz@microsoft.com%7C37c50955ca634ba702c608d8383be05c%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637321177103250576&sdata=TQCM7WVJBJa4vHDM/2llwYKB6Xc0P2ElnmVZN1x7yQo=&reserved=0">DISM Driver Servicing Command-Line Options</a>.</p><p>Drivers added using the Drvload tool are marked as the preferred driver for that device. If you add an updated driver during Windows Setup, the driver that you added with Drvload takes precedence.</p></blockquote></li></ul><hr><h2 id="ドライバのデバッグ方法"><a href="#ドライバのデバッグ方法" class="headerlink" title="ドライバのデバッグ方法"></a>ドライバのデバッグ方法</h2><ul><li><p><a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/winpe-debug-apps#kernel-mode-debugging">WinPE: Debug Apps - Kernel-mode debugging</a></p><p> 上記に関連して、以下のブログも作成しておりますので、ご参考になりましたら幸いです。</p></li><li><p><a href="https://jpwdkblog.github.io/blog/2020/07/29/winpe-kernel-debug-via-network/">Windows PE でのネットワーク経由カーネル デバッガ接続方法について</a></p></li><li><p><a href="https://jpwdkblog.github.io/blog/2020/07/29/IOCTL-sample/">Windows PE で IOCTL サンプルを動作させる方法について</a>  </p><br></li></ul><p>以上の内容がお役に立てば幸いです。</p><hr><p><code>変更履歴</code><br><code>2020/08/11 created by Tsuda</code>  </p><p>※ 本記事は 「<a href="https://jpwdkblog.github.io/blog/2020/01/01/aobut-jpwdkblog/">jpwdkblog について</a>」 の留意事項に準じます。<br>※ 併せて 「<a href="https://jpwdkblog.github.io/blog/">ホームページ</a>」 および 「<a href="https://jpwdkblog.github.io/blog/archives/">記事一覧</a>」 もご参照いただければ幸いです。  </p>]]></content>
      
      
      <categories>
          
          <category> Windows PE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参考情報 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows PE で IOCTL サンプルを動作させる方法について</title>
      <link href="/blog/2020/07/29/IOCTL-sample/"/>
      <url>/blog/2020/07/29/IOCTL-sample/</url>
      
        <content type="html"><![CDATA[<p>Windows PE で IOCTL サンプルを動作させる方法についてご紹介します。</p><span id="more"></span><br><hr><p>今回は、Windows PE で IOCTL サンプルを動作させる方法についてご紹介します。  </p><ul><li><a href="https://github.com/Microsoft/Windows-driver-samples/tree/master/general/ioctl/wdm">IOCTL サンプル サイト</a></li></ul><p>Windows PE でご自身のドライバがうまく動作しない場合の、比較の一助になれば幸いです。  </p><hr><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>今回は、以前ご案内した以下のブログと同じ環境がすでにあることを前提とします。  </p><ul><li><a href="https://jpwdkblog.github.io/blog/2020/07/29/winpe-kernel-debug-via-network/">Windows PE でのネットワーク経由のカーネルデバッガ接続方法</a></li></ul><p>上記で使用している ISO を上書きすることになるため、仮想マシンはシャットダウン (電源 OFF でもよいです) し、カーネルデバッガも終了しておきます。また、今回はあくまでもテスト目的のため、通常必要となる以下の方法での INF ファイルのドライバインストール方法を使っていない点にご留意ください。  </p><ul><li><a href="https://docs.microsoft.com/ja-jp/windows-hardware/manufacture/desktop/winpe-mount-and-customize#span-idadddriversspanadd-device-drivers-inf-files">WinPE:マウントとカスタマイズ - デバイス ドライバー (.inf ファイル) を追加する</a></li></ul><p>今回使用する IOCTL のサンプルにも、運用環境で使用してはいけない旨記載されております。  </p><ul><li><a href="https://github.com/Microsoft/Windows-driver-samples/tree/master/general/ioctl/wdm">IOCTL サンプル サイト</a> 抜粋:  <blockquote><p>[!CAUTION] This sample driver is not a Plug and Play driver. This is a minimal driver meant to demonstrate a feature of the operating system. Neither this driver nor its sample programs are intended for use in a production environment. Instead, they are intended for educational purposes and as a skeleton driver.</p></blockquote></li></ul><hr><h3 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h3><p>(1) IOCTL サンプルを Visual Studio 2019 で x64 &#x2F; Debug でビルドします。  </p><ul><li><p>1-1. サンプルの入手  </p><p> IOCTL サンプルは、以下のサイトの右側の緑色の [Code] ボタンを押すと表示される [Download ZIP] ボタンで Windows-driver-samples-master.zipをダウンロードすると、Windows-driver-samples-master\general\ioctl\wdm のフォルダにあります。<br> <a href="https://github.com/Microsoft/Windows-driver-samples">https://github.com/Microsoft/Windows-driver-samples</a></p></li><li><p>1-2. サンプルのビルド  </p><p> このフォルダの ioctl.sln を、Visual Studio 2019 で開きます。Exe フォルダの下にはユーザーモードアプリケーションである ioctlapp のプロジェクト、Sys フォルダの下にはカーネルモードドライバである sioctl のプロジェクトがあることを確認できます。  </p> <div align="left"> <img src="https://jpwdkblog.github.io/images/IOCTL-sample/SolutionExplorer.png"> </div><p> <strong>[ソリューション ‘ioctl’]</strong> を右クリックして <strong>[構成マネージャー]</strong> をクリックします。  </p> <div align="left"> <img src="https://jpwdkblog.github.io/images/IOCTL-sample/ConfigurationManager.png"> </div><p> 今回は、[アクティブソリューション構成] を **[Debug]**、[アクティブ ソリューション プラットフォーム] を <strong>[x64]</strong> とします。  </p><p> また、ioctlapp のプロパティを開き、[構成プロパティ]-[C&#x2F;C++]-[コード生成] の [ランタイム ライブラリ] は <strong>[マルチスレッド デバッグ (&#x2F;MTd)]</strong> にしておきます。  </p> <div align="left"> <img src="https://jpwdkblog.github.io/images/IOCTL-sample/ioctlappPropatyPage.png"> </div><p> [ソリューション ‘ioctl’] を右クリックして [ソリューションのリビルド] をクリックします。<br> これで、ioctlapp.exe, sioctl.sys ができます。  </p><p> 次のステップに必要なファイルと場所は以下です。</p><table><thead><tr><th align="left">ファイル</th><th align="left">場所</th></tr></thead><tbody><tr><td align="left">ioctlapp.exe&amp;nbsp;&amp;nbsp;&amp;nbsp;</td><td align="left">ioctl\wdm\exe\x64\Debug</td></tr><tr><td align="left">sioctl.sys&amp;nbsp;&amp;nbsp;&amp;nbsp;</td><td align="left">ioctl\wdm\sys\x64\Debug</td></tr></tbody></table></li></ul><p>(2) 管理者権限で起動された [展開およびイメージング ツール環境] で、以下のコマンドを実行します。(作業用ディレクトリは、前回の記事の前提のまま D:\WinPE_amd64 とします。)</p><ul><li><p>2-1. テスト署名が利用可能になるようにします。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bcdedit /store d:\WinPE_amd64\media\EFI\Microsoft\Boot\BCD /set &#123;default&#125; testsigning on</span><br></pre></td></tr></table></figure></li><li><p>2-2. 上述のアプリケーションとドライバのファイルを WinPE のイメージにコピーするために、WinPE のイメージをマウントします。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Dism /Mount-Image /ImageFile:&quot;D:\WinPE_amd64\media\sources\boot.wim&quot; /index:1 /MountDir:&quot;D:\WinPE_amd64\mount&quot;</span><br></pre></td></tr></table></figure><p> 参考:<br> <a href="https://docs.microsoft.com/ja-jp/windows-hardware/manufacture/desktop/winpe-mount-and-customize#span-idmount_the_imagespanmount-the-windows-pe-boot-image">Windows PE ブート イメージをマウントする</a></p></li><li><p>2-3. マウントした WinPE のイメージに、上述のアプリケーションとドライバのファイルをコピーします。ここでは例として \Windows\Ioctl というフォルダにコピーするとします。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; xcopy D:\develop\blog\ioctl\wdm\sys\x64\Debug\sioctl.sys &quot;D:\WinPE_amd64\mount\Windows\Ioctl&quot;</span><br><span class="line"></span><br><span class="line">&gt; xcopy D:\develop\blog\ioctl\wdm\exe\x64\Debug\ioctlapp.exe &quot;D:\WinPE_amd64\mount\Windows\Ioctl&quot;</span><br></pre></td></tr></table></figure></li><li><p>2-4. WinPE イメージのマウントを解除し、変更をコミットします。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Dism /Unmount-Image /MountDir:&quot;D:\WinPE_amd64\mount&quot; /commit</span><br></pre></td></tr></table></figure><p> 参考:<br> <a href="https://docs.microsoft.com/ja-jp/windows-hardware/manufacture/desktop/winpe-mount-and-customize#span-idunmountspanunmount-the-windows-pe-image-and-create-media">Windows PE イメージのマウントを解除し、メディアを作成する</a>  </p></li><li><p>2-5. 上記が完了したら、以下のコマンドで Windows PE の ISO ファイルを作成します。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; makewinpemedia /iso d:\WinPE_amd64\winpe_x64_debug.iso</span><br></pre></td></tr></table></figure></li></ul><p>(3) 「Windows PE でのネットワーク経由のカーネルデバッガ接続方法」の記事で作成した仮想マシンを起動すると、上記の ISO ファイルで起動します。  </p><p>(4) カーネルデバッガ側は、以下のコマンドを実行することで Windows PE のターゲットにデバッガ接続し、ブレークインできます。<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; windbg.exe -k net:port=50005,key=5.5.5.5</span><br></pre></td></tr></table></figure></p><p>(5) カーネルデバッガ側では、Symbol Search Path に上記 1-2. の sioctl.sys と ioctlapp.exe のシンボルファイル (sioctl.pdb と ioctlapp.pdb) の存在するフォルダへのフルパスを追記しておきます。  </p><p>(6) カーネルデバッガの Commands ウィンドウで以下のコマンドを実行して、sioctl.sys の DriverEntry にブレークポイントを貼ってから g を実行します。<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bp sioctl!DriverEntry</span><br></pre></td></tr></table></figure></p><p>(7) 仮想マシン上で開いているコマンドプロンプト上で、以下を実行します。  </p><ul><li><p>7-1. ioctlapp.exe のある \Windows\Ioctl フォルダに移動します。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd \Windows\Ioctl</span><br></pre></td></tr></table></figure></li><li><p>7-2. ioctlapp.exe をオプションなしで実行します。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ioctlapp.exe</span><br></pre></td></tr></table></figure></li></ul><p>(8) カーネルデバッガ側で sioctl!DriverEntry にブレークインします。自動的に ioctl\wdm\sys\sioctl.c が開かない場合には開きます。  </p><p>(9) Commands ウィンドウで p などを入力して、161 行目の「return status;」までステップ実行します。ここで、!drvobj sioctl 2 と実行すれば、132 行目で「DriverObject-&gt;MajorFunction[IRP_MJ_CREATE] &#x3D; SioctlCreateClose;」を実行している通り、以下のように、IOCTL_MJ_CREATE のコールバックに SIoctl!SioctlCreateClose がセットされていることがわかります。  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">kd&gt;</span><span class="bash"> !drvobj sioctl 2</span></span><br><span class="line">Driver object (ffffd18d336f0e40) is for:</span><br><span class="line">\Driver\SIoctl</span><br><span class="line"></span><br><span class="line">DriverEntry:   fffff80822a76150        SIoctl!GsDriverEntry</span><br><span class="line">DriverStartIo: 00000000        </span><br><span class="line">DriverUnload:  fffff80822a759e0        SIoctl!SioctlUnloadDriver</span><br><span class="line">AddDevice:     00000000 </span><br><span class="line"></span><br><span class="line">Dispatch routines:</span><br><span class="line">[00] IRP_MJ_CREATE                      fffff80822a751d0       SIoctl!SioctlCreateClose &lt;&lt;&lt;&lt;&lt; ★</span><br><span class="line">[01] IRP_MJ_CREATE_NAMED_PIPE           fffff80627dccd40      nt!IopInvalidDeviceRequest</span><br><span class="line">[02] IRP_MJ_CLOSE                       fffff80822a751d0        SIoctl!SioctlCreateClose</span><br><span class="line">[03] IRP_MJ_READ                        fffff80627dccd40        nt!IopInvalidDeviceRequest</span><br><span class="line">[04] IRP_MJ_WRITE                       fffff80627dccd40        nt!IopInvalidDeviceRequest</span><br><span class="line">[05] IRP_MJ_QUERY_INFORMATION           fffff80627dccd40      nt!IopInvalidDeviceRequest</span><br><span class="line">[06] IRP_MJ_SET_INFORMATION             fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[07] IRP_MJ_QUERY_EA                    fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[08] IRP_MJ_SET_EA                      fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[09] IRP_MJ_FLUSH_BUFFERS               fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[0a] IRP_MJ_QUERY_VOLUME_INFORMATION    fffff80627dccd40      nt!IopInvalidDeviceRequest</span><br><span class="line">[0b] IRP_MJ_SET_VOLUME_INFORMATION      fffff80627dccd40      nt!IopInvalidDeviceRequest</span><br><span class="line">[0c] IRP_MJ_DIRECTORY_CONTROL           fffff80627dccd40      nt!IopInvalidDeviceRequest</span><br><span class="line">[0d] IRP_MJ_FILE_SYSTEM_CONTROL         fffff80627dccd40      nt!IopInvalidDeviceRequest</span><br><span class="line">[0e] IRP_MJ_DEVICE_CONTROL              fffff80822a75250       SIoctl!SioctlDeviceControl</span><br><span class="line">[0f] IRP_MJ_INTERNAL_DEVICE_CONTROL     fffff80627dccd40      nt!IopInvalidDeviceRequest</span><br><span class="line">[10] IRP_MJ_SHUTDOWN                    fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[11] IRP_MJ_LOCK_CONTROL                fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[12] IRP_MJ_CLEANUP                     fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[13] IRP_MJ_CREATE_MAILSLOT             fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[14] IRP_MJ_QUERY_SECURITY              fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[15] IRP_MJ_SET_SECURITY                fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[16] IRP_MJ_POWER                       fffff80627dccd40        nt!IopInvalidDeviceRequest</span><br><span class="line">[17] IRP_MJ_SYSTEM_CONTROL              fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[18] IRP_MJ_DEVICE_CHANGE               fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[19] IRP_MJ_QUERY_QUOTA                 fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[1a] IRP_MJ_SET_QUOTA                   fffff80627dccd40       nt!IopInvalidDeviceRequest</span><br><span class="line">[1b] IRP_MJ_PNP                         fffff80627dccd40        nt!IopInvalidDeviceRequest</span><br></pre></td></tr></table></figure><p>(10) カーネルデバッガの Commands ウィンドウで以下のコマンドを実行して、sioctl.sys の SioctlCreateClose にブレークポイントを貼ってから g を実行します。  </p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bp sioctl!SioctlCreateClose</span><br></pre></td></tr></table></figure><p>(11) カーネルデバッガ側で SIoctl!SioctlCreateClose にブレークインします。k を実行すると、確かに ioctlapp.exe の main 関数の CreateFile からオープンされたことが確認できます。  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">kd&gt;</span><span class="bash"> k</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Child-SP          RetAddr           Call Site</span></span><br><span class="line">00 ffff9088`d85c73d8 fffff806`27cceda9 SIoctl!SioctlCreateClose [D:\develop\blog\ioctl\wdm\sys\sioctl.c @ 192] </span><br><span class="line">01 (Inline Function) --------`-------- nt!IopfCallDriver+0x44</span><br><span class="line">02 ffff9088`d85c73e0 fffff806`27ccde54 nt!IofCallDriver+0x59</span><br><span class="line">03 ffff9088`d85c7420 fffff806`282b9b6b nt!IoCallDriverWithTracing+0x34</span><br><span class="line">04 ffff9088`d85c7470 fffff806`282c09af nt!IopParseDevice+0x62b</span><br><span class="line">05 ffff9088`d85c75e0 fffff806`282bee11 nt!ObpLookupObjectName+0x78f</span><br><span class="line">06 ffff9088`d85c77a0 fffff806`282d99aa nt!ObOpenObjectByNameEx+0x201</span><br><span class="line">07 ffff9088`d85c78e0 fffff806`282d9599 nt!IopCreateFile+0x3fa</span><br><span class="line">08 ffff9088`d85c7980 fffff806`27e74e95 nt!NtCreateFile+0x79</span><br><span class="line">09 ffff9088`d85c7a10 00007ffc`ff25cb04 nt!KiSystemServiceCopyEnd+0x25</span><br><span class="line">0a 000000ae`5e8ff408 00007ffc`fd1c45e4 ntdll!ZwCreateFile+0x14</span><br><span class="line">0b 000000ae`5e8ff410 00007ffc`fd1c422f KERNELBASE!CreateFileInternal+0x2f4</span><br><span class="line">0c (Inline Function) --------`-------- KERNELBASE!CreateFileW+0x6a</span><br><span class="line">0d 000000ae`5e8ff580 00007ff7`9ec81cd2 KERNELBASE!CreateFileA+0xbf</span><br><span class="line">0e 000000ae`5e8ff5f0 00000000`00000000 ioctlapp!main+0x142 [D:\develop\blog\ioctl\wdm\exe\testapp.c @ 106]</span><br></pre></td></tr></table></figure><p>Testapp.c の 106 行目のコードは、確かに以下の通り CreateFile() を実行しています。  </p><div align="left"><img src="https://jpwdkblog.github.io/images/IOCTL-sample/CreateFile.png"></div><p>これでオープンできているのは、sioctl.sys で以下のように、IoCreateDevice() の第 3 引数 ntUnicodeString で \Device\SIOCTL という NT Device Name をセットしており、かつ、これに対するシンボリックリンクとして、Win32 Name である \DosDevices\IoctlTest を IoCreateSymbolicLink() で作成しているためです。  </p><div align="left"><img src="https://jpwdkblog.github.io/images/IOCTL-sample/IoCreateDevice.png"></div><p>参考:<br><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/introduction-to-ms-dos-device-names">Introduction to MS-DOS Device Names</a></p><p>ただ、上記のドキュメントにも以下の抜粋の様にある通り、上記の方法を取るのは、一般には非 WDM ドライバです。WDM ドライバは一般的にはデバイスインターフェースを登録して使用します。  </p><p>抜粋：  </p><blockquote><p>A named device object that is created by a non-WDM driver typically has an MS-DOS device name. An MS-DOS device name is a symbolic link in the object manager with a name of the form \DosDevices\DosDeviceName.</p></blockquote><blockquote><p>WDM drivers do not usually supply MS-DOS device names for their devices. Instead, WDM drivers use the IoRegisterDeviceInterface routine to register a device interface. The device interface specifies devices by their capabilities, rather than by a particular naming convention. For more information, see Device Interface Classes.</p></blockquote><p>KMDF など WDF については、以下のドキュメントもご参考ください。<br><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/wdf/using-device-interfaces">Using Device Interfaces</a></p><p>(12) 最終的に仮想マシン上のコマンドプロンプトには、ioctlapp.exe の実行結果として、以下が表示されて、問題なく動作できていることがわかります。(各 IOCTL の動作を確認したい場合は、上記を参考に SIoctl!SioctlDeviceControl にブレークポイントを貼ってみてください。)  </p><div align="left"><img src="https://jpwdkblog.github.io/images/IOCTL-sample/SIoctl_SioctlDeviceControl.png"></div><br><p>以上の内容がお役に立てば幸いです。  </p><hr><p><code>変更履歴</code><br><code>2020/07/29 created by Tsuda</code>  </p><p>※ 本記事は 「<a href="https://jpwdkblog.github.io/blog/2020/01/01/aobut-jpwdkblog/">jpwdkblog について</a>」 の留意事項に準じます。<br>※ 併せて 「<a href="https://jpwdkblog.github.io/blog/">ホームページ</a>」 および 「<a href="https://jpwdkblog.github.io/blog/archives/">記事一覧</a>」 もご参照いただければ幸いです。  </p>]]></content>
      
      
      <categories>
          
          <category> Windows PE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOCTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows PE でのネットワーク経由カーネル デバッガ接続方法について</title>
      <link href="/blog/2020/07/29/winpe-kernel-debug-via-network/"/>
      <url>/blog/2020/07/29/winpe-kernel-debug-via-network/</url>
      
        <content type="html"><![CDATA[<p>Windows PE でのネットワーク経由のカーネルデバッガ接続方法についてご紹介します。</p><span id="more"></span><br><hr><p>Windows PE でのシリアルケーブル経由でのカーネルデバッガ接続方法は、以下のドキュメントが公開されております。この方法では、カーネルデバッガを起動する側であるホスト PC を選びません。  </p><ul><li><a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/winpe-debug-apps#kernel-mode-debugging">WinPE: Debug Apps - Kernel-mode debugging</a></li></ul><p>対しまして、今回ご紹介するネットワーク経由のカーネルデバッガ接続方法では、通常、以下のブログでご紹介したような kdnet.exe は、ターゲット PC の再起動が必要となるため使えず、予めホスト PC の IP アドレスを Windows PE 側の BCD に設定しておく必要があります。  </p><ul><li><a href="https://social.msdn.microsoft.com/Forums/ja-JP/db91ddff-f8ff-49d8-bef2-2a0c596414c2/hyperv-?forum=wdksupportteamja">Hyper-V 仮想マシンへのネットワーク経由のカーネルデバッガ接続方法</a></li></ul><p>それでは、具体的な手順を紹介します。</p><hr><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>今回は、Windows PE のイメージ作成を行う環境と、カーネルデバッガを起動するホスト PC は同じ PC とします。そして、その PC の Hyper-V 仮想マシン (UEFI を使うため第二世代、セキュアブートは OFF) を、ターゲット PC として、Windows PE の ISO を読ませるようにします。  </p><p>ホスト PC には、以下のリンクから、Windows ADK for Windows 10 バージョン 1903 と、ADK 用の Windows PE アドオンをインストールしています。  </p><ul><li><p><a href="https://docs.microsoft.com/ja-jp/windows-hardware/get-started/adk-install">Windows ADK のダウンロードとインストール</a></p></li><li><p><a href="https://go.microsoft.com/fwlink/?linkid=2086042">Windows ADK for Windows 10、バージョン 1903 のダウンロード</a></p></li><li><p><a href="https://go.microsoft.com/fwlink/?linkid=2087112">ADK 用の Windows PE アドオンのダウンロード</a></p></li></ul><hr><h3 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h3><p>(1) [スタート] -&gt; [Windows Kits] -&gt; [展開およびイメージング ツール環境] を管理者権限で起動します。</p><p>(2) copype.exe で、例として D:\WinPE_amd64 に作業用ディレクトリを作成します。<br>(D ドライブの使用は例であり、任意の場所で問題ありません。また、すでに D:\WinPE_amd64 が存在する場合は、コマンドがエラーとなるため、事前に削除しておきます。)</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> copype amd64 d:\WinPE_amd64</span></span><br></pre></td></tr></table></figure><p>(3) 以下のコマンドを実行し、Windows PE 環境側のネットワーク接続でのカーネルデバッグ設定を行います。  </p><ul><li><p>(3-A) Windows PE 環境が UEFI の場合</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; bcdedit /store d:\WinPE_amd64\media\EFI\Microsoft\Boot\BCD /set &#123;default&#125; debug on</span><br><span class="line"></span><br><span class="line">&gt; bcdedit /store d:\WinPE_amd64\media\EFI\Microsoft\Boot\BCD /set &#123;default&#125; bootdebug on</span><br><span class="line"></span><br><span class="line">&gt; bcdedit /store d:\WinPE_amd64\media\EFI\Microsoft\Boot\BCD /dbgsettings NET HOSTIP:&lt;カーネルデバッガを起動するホスト PC の IP アドレス、xxx.xxx.xxx.xxx&gt; PORT:50005 key:5.5.5.5</span><br></pre></td></tr></table></figure></li><li><p>(3-B) Windows PE 環境がレガシー BIOS の場合</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; bcdedit /store d:\WinPE_amd64\media\Boot\BCD /set &#123;default&#125; debug on</span><br><span class="line"></span><br><span class="line">&gt; bcdedit /store d:\WinPE_amd64\media\Boot\BCD /set &#123;default&#125; bootdebug on</span><br><span class="line"></span><br><span class="line">&gt; bcdedit /store d:\WinPE_amd64\media\Boot\BCD /dbgsettings NET HOSTIP:&lt;カーネルデバッガを起動するホスト PC の IP アドレス、xxx.xxx.xxx.xxx&gt; PORT:50005 key:5.5.5.5</span><br></pre></td></tr></table></figure><p> <code>PORT の 50005 と key の 5.5.5.5 は例です。</code></p></li></ul><p>(4) 以下のコマンドを実行し、設定した結果に問題ないか確認します。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; bcdedit /store d:\WinPE_amd64\media\EFI\Microsoft\Boot\BCD /dbgsettings</span><br><span class="line">   key                     5.5.5.5</span><br><span class="line">   debugtype               NET</span><br><span class="line">   hostip                  xxx.xxx.xxx.xxx</span><br><span class="line">   port                    50005</span><br><span class="line">   dhcp                    Yes</span><br></pre></td></tr></table></figure><p>(5) 上記が完了したら、以下のコマンドで Windows PE の ISO ファイルを作成します。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; makewinpemedia /iso d:\WinPE_amd64\winpe_x64_debug.iso</span><br></pre></td></tr></table></figure><p>(6) 上記の ISO ファイルで Hyper-V 仮想環境 (第二世代、セキュアブートなし) を作成します。  </p><p>(上記の手順 (3) で、(3-A) で設定を行ったことが前提です。第一世代ですと、UEFI ではないため、(3-B) でないとカーネルデバッグ接続できません。また、セキュアブートは無効にする必要があります。)  </p><p>使用する仮想スイッチは、上記「<a href="https://social.msdn.microsoft.com/Forums/ja-JP/db91ddff-f8ff-49d8-bef2-2a0c596414c2/hyperv?forum=wdksupportteamja">Hyper-V 仮想マシンへのネットワーク経由のカーネルデバッガ接続方法</a>」の「1. ホストPC と仮想マシンをネットワーク接続します。」と同じものを使っています。</p><div align="left"><img src="https://jpwdkblog.github.io/images/winpe-kernel-debug-via-network/SecureBootSetting.png"></div><p>(7) カーネルデバッガ側は、以下のコマンドを実行することで Windows PE のターゲットにデバッガ接続し、ブレークインできます。<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; windbg.exe -k net:port=50005,key=5.5.5.5</span><br></pre></td></tr></table></figure><br><br></p><p>以上の内容がお役に立てば幸いです。  </p><hr><p><code>変更履歴</code><br><code>2020/07/29 created by Tsuda</code>  </p><p>※ 本記事は 「<a href="https://jpwdkblog.github.io/blog/2020/01/01/aobut-jpwdkblog/">jpwdkblog について</a>」 の留意事項に準じます。<br>※ 併せて 「<a href="https://jpwdkblog.github.io/blog/">ホームページ</a>」 および 「<a href="https://jpwdkblog.github.io/blog/archives/">記事一覧</a>」 もご参照いただければ幸いです。  </p>]]></content>
      
      
      <categories>
          
          <category> Windows PE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> カーネル デバッグ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>過去ブログについて</title>
      <link href="/blog/2020/01/12/past-blog/"/>
      <url>/blog/2020/01/12/past-blog/</url>
      
        <content type="html"><![CDATA[<p>過去のブログ情報を紹介いたします。</p><span id="more"></span><h2 id="WDK"><a href="#WDK" class="headerlink" title="WDK"></a>WDK</h2><p><a href="https://social.msdn.microsoft.com/Forums/ja-JP/home?forum=wdksupportteamja">Windows Driver Kit サポートチーム フォーラム</a></p><p>抜粋:  </p><ul><li><a href="https://social.msdn.microsoft.com/Forums/ja-JP/521847f9-f90a-4f2b-81eb-3efb57b34152/windows-10-iot-core-com-?forum=wdksupportteamja">Windows 10 IoT Core 環境の COM ポートの割り当てについて</a></li><li><a href="https://social.msdn.microsoft.com/Forums/ja-JP/e1979c21-d197-4fb2-a0b4-bb3d2c67337f/wia-wiadriverex-?forum=wdksupportteamja">WIA ミニドライバーサンプル wiadriverex をデバッグする</a></li><li><a href="https://social.msdn.microsoft.com/Forums/ja-JP/3842e76b-676d-44ce-b1ae-1ff324b9c3b3/visual-studio-2015-123911239812486124731248832626215172604127861?forum=wdksupportteamja">Visual Studio 2015 でのテスト署名方法</a></li><li><a href="https://social.msdn.microsoft.com/Forums/ja-JP/d74842f6-5c05-44ad-b98d-3f26874a5647/12459125401249312523125141254012489-1248712496124831246012391?forum=wdksupportteamja">カーネルモード デバッガで UMDF ドライバをライブデバッグする</a></li><li><a href="https://social.msdn.microsoft.com/Forums/ja-JP/06aafefe-ba4c-407e-a4c4-36562d6c6da4/v4-?forum=wdksupportteamja">V4 プリンター ドライバのデバッガアタッチ方法</a></li><li><a href="https://social.msdn.microsoft.com/Forums/ja-JP/dd9447a6-6221-407e-9f01-a19b86d77567/-?forum=wdksupportteamja">デバイスマネージャーの [表示] を [デバイス (接続別)] に切り替える</a></li><li><a href="https://social.msdn.microsoft.com/Forums/ja-JP/ffae3a15-11af-4ab2-8341-4f004356a6d0?forum=wdksupportteamja">ダンプファイルに保存されたイベントログを取り出す</a></li><li><a href="https://social.msdn.microsoft.com/Forums/ja-JP/8ff7b651-dcd1-4721-ab34-12c192fa0e4f/12480125311250312501124491245212523123952044523384123731242812?forum=wdksupportteamja">ダンプファイルに保存された ETW トレースログを表示する</a><br>など</li></ul><p><a href="https://docs.microsoft.com/ja-jp/archive/blogs/jpwdkblog/">旧: Japan WDK Support Blog</a>  </p><p>抜粋:  </p><ul><li><a href="https://docs.microsoft.com/ja-jp/archive/blogs/jpwdkblog/japan-wdk-support-blog-%E7%B5%82%E4%BA%86%E3%81%AE%E3%81%8A%E7%9F%A5%E3%82%89%E3%81%9B">Japan WDK Support Blog 終了のお知らせ</a>  </li><li><a href="https://docs.microsoft.com/ja-jp/archive/blogs/jpwdkblog/authenticode-%E7%BD%B2%E5%90%8D%E3%81%AE%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AE%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5">Authenticode 署名のドライバインストールのトラブルシューティングの一例</a></li><li><a href="https://docs.microsoft.com/ja-jp/archive/blogs/jpwdkblog/gpd_file_case_sensitive">プリンタードライバーの GPD ファイル記述に関する注意事項</a></li><li><a href="https://docs.microsoft.com/ja-jp/archive/blogs/jpwdkblog/time-travel-debugging-preview-lab">Time Travel Debugging (Preview) の Lab</a></li><li><a href="https://docs.microsoft.com/ja-jp/archive/blogs/jpwdkblog/hyper-v-kernel-debug-kdnet">Hyper-V 仮想マシンへのネットワーク経由のカーネルデバッガ接続方法</a></li><li><a href="https://docs.microsoft.com/ja-jp/archive/blogs/jpwdkblog/wdk-for-windows-10-version-1803">WDK for Windows 10, version 1803</a></li><li><a href="https://docs.microsoft.com/ja-jp/archive/blogs/jpwdkblog/err-exe">Err.exe でエラーコードの定義を探す</a></li><li><a href="https://docs.microsoft.com/ja-jp/archive/blogs/jpwdkblog/minispy-file-system-minifilter-driver-%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B">Minispy File System Minifilter Driver サンプルを動かしてみる</a><br>など</li></ul><hr><p><code>変更履歴</code><br><code>2020/01/12 created by Mochizuki</code><br><code>2021/04/01 created by Mochizuki</code>  </p><p>※ 本記事は 「<a href="https://jpwdkblog.github.io/blog/2020/01/01/aobut-jpwdkblog/">jpwdkblog について</a>」 の留意事項に準じます。<br>※ 併せて 「<a href="https://jpwdkblog.github.io/blog/">ホームページ</a>」 および 「<a href="https://jpwdkblog.github.io/blog/archives/">記事一覧</a>」 もご参照いただければ幸いです。  </p>]]></content>
      
      
      <categories>
          
          <category> Windows Driver Kit 全般 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 過去ブログ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jpwdkblog について</title>
      <link href="/blog/2020/01/01/aobut-jpwdkblog/"/>
      <url>/blog/2020/01/01/aobut-jpwdkblog/</url>
      
        <content type="html"><![CDATA[<p>日本マイクロソフトの Windows Driver Kit に関するサポート情報のブログです。</p><h3 id="公開日"><a href="#公開日" class="headerlink" title="公開日"></a>公開日</h3><p>2020 年 1 月 1 日より公開いたしました。</p><h3 id="活動について"><a href="#活動について" class="headerlink" title="活動について"></a>活動について</h3><p>製品のサポート メンバーによって運用されております。仕様に関する情報やトラブル シューティングの手順、実装におけるワンポイント アドバイスを公開いたします。</p><h3 id="留意事項"><a href="#留意事項" class="headerlink" title="留意事項"></a>留意事項</h3><p>サイトのコンテンツや情報において、可能な限り正確な情報を掲載し、更新するよう努めております。しかしながら、状況の変化や情報が古くなることにより、必ずしもお客様環境に適用できない情報となる場合がございます。恐れ入りますが、予めご留意くださいますようお願い申し上げます。</p>]]></content>
      
      
      <categories>
          
          <category> Windows Driver Kit 全般 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> はじめに </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
